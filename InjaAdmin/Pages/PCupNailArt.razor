@page "/CupNailArt"
@attribute [Authorize(Roles = "4,5")]

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

@inject IJSRuntime JsRuntime
@inject NavigationManager navManager

<h3>Nail Art Cup</h3>

<div>
  <div>
    <table>
      <tr>
        <td style="width: 150px">
          <span>Event:</span>
        </td>
        <td style="width: 500px">
          <SfComboBox @ref="@_comboEvent" @bind-Value="@(_eventId)" TValue="int?" TItem="Event"
                      Width="550" PopupWidth="500"
                      DataSource="@(_lstEvents)">
            <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
            <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="@OnEventValueChange"/>
          </SfComboBox>
        </td>
      </tr>
    </table>
    <div>
      <SfButton Content="Go Back" @onclick="@(() => navManager.NavigateTo($"WinByChallengeDivision{(_eventId != null ? $"?eid={_eventId}" : string.Empty)}"))"/>
    </div>
  </div>
  <div>
    <SfGrid @ref="GridCutNailArt" TValue="VCupNailArt" DataSource="@_lstData"
            AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowSorting="true"
            AllowExcelExport="true" AllowPdfExport="true" AllowGrouping="true"
            Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "CsvExport" })">
      <GridTemplates>
        <DetailTemplate>
          @{
            var detailInfo = context is not VCupNailArt selectedContender ? 
              new List<VCupNailArtBase>() : 
              _db.VCupNailArtBases.Where(x => x.Contenderid == selectedContender.Contenderid).ToList();
            <SfGrid @ref="GridCupNailBase" TValue="VCupNailArtBase" DataSource="@detailInfo"
                    AllowResizing="true" AllowSorting="true">
              <GridColumns>
                <GridColumn Field="@nameof(VCupNailArtBase.Eventchallengename)" HeaderText="Challenge"/>
                <GridColumn Field="@nameof(VCupNailArtBase.FinalPoint)" HeaderText="Points"/>
              </GridColumns>
            </SfGrid>
          }
        </DetailTemplate>
      </GridTemplates>
      <GridSortSettings>
        <GridSortColumns>
          <GridSortColumn Field="@nameof(VCupNailArt.FinalPoint)" Direction="SortDirection.Descending"/>
        </GridSortColumns>
      </GridSortSettings>
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridGroupSettings Columns="@(new[] { nameof(VCupNailArt.Divisionname) })"/>
      <GridEvents OnToolbarClick="@GridToolbarClick" TValue="VCupNailArt"/>
      <GridColumns>
        <GridColumn Field="@nameof(VCupNailArt.Divisionname)" HeaderText="Division"/>
        <GridColumn Field="@nameof(VCupNailArt.Contendernumber)" HeaderText="Number"/>
        <GridColumn Field="@nameof(VCupNailArt.Contendername)" HeaderText="Contender"/>
        <GridColumn Field="@nameof(VCupNailArt.FinalPoint)" HeaderText="Points"/>
      </GridColumns>
    </SfGrid>
  </div>
</div>

@code {
  private readonly dbContext _db = new();
  List<Event>? _lstEvents;
  int? _eventId;
  SfComboBox<int?, Event>? _comboEvent;

  List<VCupNailArt>? _lstData;
  SfGrid<VCupNailArt>? GridCutNailArt;
  SfGrid<VCupNailArtBase>? GridCupNailBase;

  private async Task FillDS()
  {
    _lstEvents = await _db.Events.Where(x => x.Active == true).OrderBy(x => x.Name).ToListAsync();

    if (_eventId != null)
    {
      _lstData = new dbContext()
        .VCupNailArts
        .Where(x => x.Eventid == _eventId)
        .ToList();
    }
  }

  protected override async Task OnInitializedAsync()
  {
    var foundQueryParameter = QueryHelpers.ParseQuery(navManager.ToAbsoluteUri(navManager.Uri).Query);

    if (foundQueryParameter.TryGetValue("eid", out var eid))
    {
      _eventId = Convert.ToInt32(eid);
    }

    await FillDS();
  }


  private async Task OnEventValueChange(ChangeEventArgs<int?, Event> args)
  {
    await FillDS();
    if (GridCutNailArt != null)
      await GridCutNailArt.Refresh();
    StateHasChanged();
  }

  private async Task GridToolbarClick(ClickEventArgs args)
  {
    if (GridCutNailArt == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(GridCutNailArt)}_excelexport":
        await GridCutNailArt.ExportToExcelAsync();
        break;
      case $"{nameof(GridCutNailArt)}_pdfexport":
        await GridCutNailArt.ExportToPdfAsync();
        break;
      case $"{nameof(GridCutNailArt)}_csvexport":
        await GridCutNailArt.ExportToCsvAsync();
        break;
    }
  }

}