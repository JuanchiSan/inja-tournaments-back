@page "/GroupPoints"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager

@attribute [Authorize(Roles = "4,5")]

<h3>Group Points</h3>

<div>
  <div>
    <table>
      <tr>
        <td style="width: 150px">
          <span>Event:</span>
        </td>
        <td style="width: 500px">
          <SfComboBox @ref="_comboEvent" @bind-Value="@(_eventId)" TValue="int?" TItem="Event"
                      Width="550" PopupWidth="500"
                      DataSource="@(_lstEvents)">
            <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
            <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="@OnEventValueChange"/>
          </SfComboBox>
        </td>
      </tr>
    </table>
    <div>
      <SfButton Content="Go Back" @onclick="@(() => navManager.NavigateTo($"WinByChallengeDivision{(_eventId != null ? $"?eid={_eventId}": string.Empty)}"))"/>
    </div>
  </div>
  <div>
    <SfGrid @ref="GroupWinners" TValue="VInjagroupPointsPlana" DataSource="@_lstData"
            AllowFiltering="false" AllowReordering="true" AllowResizing="true" AllowSorting="true"
            AllowExcelExport="true" AllowPdfExport="true" AllowGrouping="true"
            Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "CsvExport" })">
      @* <GridAggregates> *@
      @*   <GridAggregate> *@
      @*     <GridAggregateColumns> *@
      @*       <GridAggregateColumn Field="@nameof(VInjagroupPointsPlana.FinalPoint)" Type="AggregateType.Sum"> *@
      @*         <GroupCaptionTemplate> *@
      @*           @{ *@
      @*             var aggregate = (context as AggregateTemplateContext); *@
      @*             <div> *@
      @*               <p>Total Points: @(aggregate?.Sum)</p> *@
      @*             </div> *@
      @*           } *@
      @*         </GroupCaptionTemplate> *@
      @*         <GroupFooterTemplate> *@
      @*           @{ *@
      @*             var aggregate = (context as AggregateTemplateContext); *@
      @*             <div> *@
      @*               <p>Total Points: @(aggregate?.Sum)</p> *@
      @*             </div> *@
      @*           } *@
      @*         </GroupFooterTemplate> *@
      @*       </GridAggregateColumn> *@
      @*     </GridAggregateColumns> *@
      @*   </GridAggregate> *@
      @* </GridAggregates> *@
      <GridSortSettings>
        <GridSortColumns>
          <GridSortColumn Field="@nameof(VInjagroupPointsPlana.GroupPosition)" Direction="SortDirection.Ascending"/>
        </GridSortColumns>
      </GridSortSettings>
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      @* <GridGroupSettings Columns="@(new[] { nameof(VInjagroupPointsPlana.Groupname) })"/> *@
      <GridEvents OnToolbarClick="@GridToolbarClick" TValue="VInjagroupPointsPlana"/>
      <GridColumns>
        <GridColumn Field="@nameof(VInjagroupPointsPlana.Groupname)" HeaderText="Group"/>
        <GridColumn Field="@nameof(VInjagroupPointsPlana.Eventchallengename)" HeaderText="Challenge"/>
        <GridColumn Field="@nameof(VInjagroupPointsPlana.Divisionname)" HeaderText="Division"/>
        <GridColumn Field="@nameof(VInjagroupPointsPlana.Contendername)" HeaderText="Contender"/>
        <GridColumn Field="@nameof(VInjagroupPointsPlana.Contendernumber)" HeaderText="Number"/>
        <GridColumn Field="@nameof(VInjagroupPointsPlana.FinalPoint)" HeaderText="Points"/>
        <GridColumn Field="@nameof(VInjagroupPointsPlana.GroupPoints)" HeaderText="Group Points"/>
        <GridColumn Field="@nameof(VInjagroupPointsPlana.GroupPosition)" HeaderText="Group Position"/>
      </GridColumns>
    </SfGrid>
  </div>
</div>

@code {
  private readonly dbContext _db = new();
  List<Event>? _lstEvents;
  int? _eventId;
  SfComboBox<int?, Event>? _comboEvent;

  List<VInjagroupPointsPlana>? _lstData;
  SfGrid<VInjagroupPointsPlana>? GroupWinners;

  private async Task FillDS()
  {
    _lstEvents = await _db.Events.Where(x => x.Active == true).OrderBy(x => x.Name).ToListAsync();

    if (_eventId != null)
    {
      _lstData = _db
        .VInjagroupPointsPlanas
        .Where(x => x.Eventid == _eventId)
        .ToList();
    }
  }

  protected override void OnInitialized()
  {
    var foundQueryParameter = QueryHelpers.ParseQuery(navManager.ToAbsoluteUri(navManager.Uri).Query);

    if (foundQueryParameter.TryGetValue("eid", out var eid))
    {
      _eventId = Convert.ToInt32(eid);
    }

    Task.Run(async () => await FillDS()).Wait();
    Task.Run(async () =>
    {
      if (_comboEvent != null)
        await _comboEvent.RefreshDataAsync();
    }).Wait();
    StateHasChanged();
  }


  private async Task OnEventValueChange(ChangeEventArgs<int?, Event> args)
  {
    await FillDS();
    if (GroupWinners != null)
      await GroupWinners.Refresh();
    StateHasChanged();
  }

  private async Task GridToolbarClick(ClickEventArgs args)
  {
    if (GroupWinners == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(GroupWinners)}_excelexport":
        await GroupWinners.ExportToExcelAsync();
        break;
      case $"{nameof(GroupWinners)}_pdfexport":
        await GroupWinners.ExportToPdfAsync();
        break;
      case $"{nameof(GroupWinners)}_csvexport":
        await GroupWinners.ExportToCsvAsync();
        break;
    }
  }

}