@page "/PointViewAll"

@attribute [Authorize(Roles = "5")]

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navManager
@inject IJSRuntime JsRuntime

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

<h3>PointView</h3>

<div>
  <div>
    <table>
      <tr>
        <td>Event</td>
        <td style="width: 400px">
          <SfComboBox @ref="comboEvents" @bind-Value="@(_eventId)" TValue="int?" TItem="Event"
                      PopupWidth="450" DataSource="@_lstEvents">
            <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
            <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="OnComboEventValueChange"/>
          </SfComboBox>
        </td>
      </tr>
    </table>
  </div>
  <div>
    <SfGrid @ref="@GridPoints" TValue="VUserpointGroup" ID="@nameof(GridPoints)"
            AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowExcelExport="true"
            AllowPdfExport="true" AllowSelection="true" AllowSorting="true" AllowGrouping="true"
            Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "CsvExport", "Search" })"
            DataSource="@_lstPoints">
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
      <GridSortSettings>
        <GridSortColumns>
          <GridSortColumn Field="@nameof(VUserpointGroup.FinalPoint)" Direction="SortDirection.Descending"/>
        </GridSortColumns>
      </GridSortSettings>
       <GridAggregates>
        <GridAggregate>
          <GridAggregateColumns>
            <GridAggregateColumn Field="@nameof(VUserpointGroup.Totalpoints)" Type="AggregateType.Sum" Format="N2" />
            <GridAggregateColumn Field="@nameof(VUserpointGroup.Deductions)" Type="AggregateType.Sum" Format="N2" />
            <GridAggregateColumn Field="@nameof(VUserpointGroup.FinalPoint)" Type="AggregateType.Sum" Format="N2" />
          </GridAggregateColumns>
        </GridAggregate>
       </GridAggregates>
      <GridGroupSettings>

      </GridGroupSettings>
      <GridEvents CommandClicked="GridPointsCommandClick" OnToolbarClick="@GridToolbarClick" TValue="VUserpointGroup"/>
      <GridColumns>
        <GridColumn Field="@nameof(VUserpointGroup.Competitiontypename)" HeaderText="Competition" Width="120"/>
        <GridColumn Field="@nameof(VUserpointGroup.Eventchallengeid)" HeaderText="EChallenge ID" Width="120"/>
        <GridColumn Field="@nameof(VUserpointGroup.Eventchallengename)" HeaderText="Challenge" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Divisionid)" HeaderText="Div id" Width="120"/>
        <GridColumn Field="@nameof(VUserpointGroup.Divisionname)" HeaderText="Div Name" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Contenderid)" HeaderText="Contender Id" Width="200"/>
        <GridColumn Field="@nameof(VUserpointGroup.Contendername)" HeaderText="Contender" Width="200"/>
        <GridColumn Field="@nameof(VUserpointGroup.Contendernumber)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" HeaderText="Number" Width="200"/>
        <GridColumn Field="@nameof(VUserpointGroup.NotEval)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" HeaderText="Not Evals" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Eval)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" HeaderText="Evals" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Totalpoints)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" HeaderText="Total Points" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Deductions)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" HeaderText="Deductions" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.FinalPoint)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" HeaderText="Final Points" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Maxscore)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" HeaderText="Maxscore" Width="150"/>
      @*   <GridColumn HeaderText="Manage Records" Width="150"> *@
      @*     <GridCommandColumns> *@
      @*       <GridCommandColumn Type="CommandButtonType.None" ID="Edit" ButtonOption="@(new CommandButtonOptions { IconCss = "e-icons e-edit", CssClass = "e-flat" })"/> *@
      @*     </GridCommandColumns> *@
      @*   </GridColumn> *@
       </GridColumns> 
    </SfGrid>
  </div>
</div>

<style>
    .e-removeEditcommand .e-unboundcell .e-unboundcelldiv button.e-photo {
        display: none;
    }
</style>

@code {
  private dbContext _db = new();
  
  string? _challengeName { get; set; }
  string? _contenderName { get; set; }

  private CImageViewer? PhotoDialog { get; set; }
  //bool PhotoDialogVisible { get; set; }
  //string PhotoURL { get; set; } = string.Empty;

  #region Grid

  SfGrid<VUserpointGroup>? GridPoints { get; set; }
  List<VUserpointGroup> _lstPoints = new();

  private void OnGridDataRowBound(RowDataBoundEventArgs<VUserpointGroup> obj)
  {
    if (obj.Data.CantPhotos == 0)
    {
      obj.Row.AddClass(new [] { "e-removeEditcommand" });
    }
  }

  private async Task GridPointsCommandClick(CommandClickEventArgs<VUserpointGroup> obj)
  {
    switch (obj.CommandColumn.ID)
    {
      case "Edit":
        await sessionStorage.SetItemAsync(Helper.paramDetailPointView, Tuple.Create(obj.RowData.Contenderid, obj.RowData.Contendername, obj.RowData.Eventid, obj.RowData.Eventchallengeid, obj.RowData.Divisionid));
        navManager.NavigateTo("/PointDetail");
        break;
    }
  }

  private async Task GridToolbarClick(ClickEventArgs args)
  {
    if (GridPoints == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(GridPoints)}_excelexport":
        await GridPoints.ExportToExcelAsync();
        break;
      case $"{nameof(GridPoints)}_pdfexport":
        await GridPoints.ExportToPdfAsync();
        break;
      case $"{nameof(GridPoints)}_csvexport":
        await GridPoints.ExportToCsvAsync();
        break;
    }
  }

  #endregion

  #region General

  private async Task FillPoints()
  {
    _lstPoints.Clear();
    if (_eventId != null)
      _lstPoints = await _db
        .VUserpointGroups
        .Where(x => x.Eventid == _eventId)
        .ToListAsync();
  }

  private async Task FillDS()
  {
    await FillLstEvents();
  }

  protected override Task OnInitializedAsync()
  {
    var foundQueryParameter = QueryHelpers.ParseQuery(navManager.ToAbsoluteUri(navManager.Uri).Query);

    if (foundQueryParameter.TryGetValue("eid", out var eid))
    {
      _eventId = Convert.ToInt32(eid);
    }

    Task.Run(async () => await FillDS()).Wait(5000);
    Task.Run(async () => await FillPoints()).Wait(5000);

    return base.OnInitializedAsync();
  }

  #endregion General

  #region Event

  private async Task FillLstEvents()
  {
    _lstEvents = await new dbContext()
      .Events
      .Where(x => x.Active == true)
      .OrderBy(x => x.Name)
      .ToListAsync();

    _eventId ??= _lstEvents.First().Id;
  }

  int? _eventId;
  List<Event> _lstEvents = new();
  private SfComboBox<int?, Event>? comboEvents { get; set; }

  private async Task OnComboEventValueChange(ChangeEventArgs<int?, Event> obj)
  {
    await FillPoints();
  }

  #endregion
}