@page "/Login"
@using Microsoft.EntityFrameworkCore
@using InjaAdmin.Auth

@inject SfDialogService dialogService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
  <div class="col-lg-4 offset-lg-4 pb-4 border">
    <div class="mb-3 text-center">
      <h3>Login</h3>
    </div>
    <div class="mb-3">
      <label>User Mail</label>
      <input @bind="model.UserName" class="form-control" placeholder="User Mail" />
    </div>
    <div class="mb-3">
      <label>Password</label>
      <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
    </div>
    <div class="mb-3 d-grid gap-2">
      <button @onclick="OnLoginClick" class="btn btn-primary">Login</button>  
    </div>
  </div>
</div>

@code {
  Model model = new Model();
  
  public class Model
  {
    public string UserName { get; set; }
    public string Password { get; set; }
  }

  private async Task OnLoginClick(MouseEventArgs obj)
  {
    var dbUsers = await new dbContext().Injausers.ToListAsync(); 
    var dbUser = dbUsers.FirstOrDefault(x => 
      string.Equals(x.Mail, model.UserName, StringComparison.InvariantCultureIgnoreCase) && 
      string.Equals(x.Pass, model.Password, StringComparison.CurrentCulture));
    
    if (dbUser == null)
    {
      await dialogService.AlertAsync("User Not Found or Password is Wrong", "Login Failed");
      return;
    }

    var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
    await customAuthStateProvider.UpdateAuthenticationState(new UserSession
    {
      Name = dbUser.Name!,
      UserName = dbUser.Mail!,
      Role = dbUser.Adminusertype.ToString()
    });
    navManager.NavigateTo("/", true);
  }
}