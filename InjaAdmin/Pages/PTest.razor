@page "/PTest"
@using System.Dynamic

<h3>PTest</h3>

@if (LstCriterias != null)
{
  <SfGrid @ref="@GridCriterias" TValue="MyConcreteObject" ID="@nameof(GridCriterias)"
          AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true"
          Toolbar="@(new List<string> { "Edit", "Update", "Cancel", "ExcelExport", "PdfExport", "CsvExport", "Search" })"
          DataSource="@LstCriterias">
    <GridEditSettings AllowEditing="true" Mode="EditMode.Normal"/>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
    <GridColumns>
      <GridColumn Field="CRKey" IsPrimaryKey="true" Visible="false"/>
      <GridColumn Field="CriteriaName" HeaderText="Criterias" Width="200" AllowEditing="false"/>
      <GridColumn Field="Round" HeaderText="Rounds" Width="200" AllowEditing="false"/>
      <GridForeignColumn Field="div_1" HeaderText="DIV 1" Width="200" AllowEditing="true" Visible="@(LstDivisions is {Count: >= 1 })"
                         TValue="TestKeyValue" ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>
      <GridForeignColumn Field="div_2" HeaderText="DIV 2" Width="200" AllowEditing="true" Visible="@(LstDivisions is {Count: >= 2 })"
                         ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>
      <GridForeignColumn Field="div_3" HeaderText="DIV 3" Width="200" AllowEditing="true" Visible="@(LstDivisions is {Count: >= 3 })"
                         ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>
      <GridForeignColumn Field="div_4" HeaderText="DIV 4" Width="200" AllowEditing="true" Visible="@(LstDivisions is {Count: >= 4 })"
                         ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>
      <GridForeignColumn Field="div_5" HeaderText="DIV 5" Width="200" AllowEditing="true" Visible="@(LstDivisions is {Count: >= 5 })"
                         ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>
      <GridForeignColumn Field="div_6" HeaderText="DIV 6" Width="200" AllowEditing="true" Visible="@(LstDivisions is {Count: >= 6 })"
                         TValue="TestKeyValue" ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>
      <GridForeignColumn Field="div_7" HeaderText="DIV 7" Width="200" AllowEditing="true" Visible="@(LstDivisions is {Count: >= 7 })"
                         ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>
      <GridForeignColumn Field="div_8" HeaderText="DIV 8" Width="200" AllowEditing="true" Visible="@(LstDivisions is {Count: >= 8 })"
                         ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>

      @* @foreach (var d in LstDivisions.OrderBy(x => x.Value)) *@
      @* { *@
      @*   var col = $"div_{d.Key}"; *@
      @*   <GridForeignColumn Field="@($"{col}")" HeaderText="@d.Value" Width="200" AllowEditing="true"  *@
      @*                       ForeignDataSource="@LstJudges" ForeignKeyField="Key" ForeignKeyValue="Value"/>  *@
      @* } *@
    </GridColumns>
  </SfGrid>
}
else
{
  <h2>Loading</h2>
}

@code {
  private SfGrid<MyConcreteObject>? GridCriterias { get; set; }
  private List<TestKeyValue>? LstJudges;
  private List<MyConcreteObject>? LstCriterias;
  private List<TestKeyValue>? LstDivisions;

  private void FillDS()
  {
    LstDivisions = new List<TestKeyValue> { new TestKeyValue { Key = 1, Value = "D1" }, new TestKeyValue { Key = 2, Value = "D2" }, new TestKeyValue { Key = 3, Value = "D3" }, new TestKeyValue { Key = 4, Value = "D4" } };
    LstJudges = new List<TestKeyValue> { new TestKeyValue { Key = 1, Value = "J1" }, new TestKeyValue { Key = 2, Value = "J2" }, new TestKeyValue { Key = 3, Value = "J3" } };
  LstCriterias = Enumerable.Range(1, 4).Select(x =>
  {
    var d = new MyConcreteObject
    {
      CRKey = x.ToString(),
      CriteriaId = x,
      Round = 1,
      CriteriaName = $"Critero {x}",
      div_1 = new Random().Next(1, 100) > 90 ? 1 : null,
      div_2 = new Random().Next(1, 100) > 90 ? 1 : null,
      div_3 = new Random().Next(1, 100) > 90 ? 1 : null,
      div_4 = new Random().Next(1, 100) > 90 ? 1 : null,
      div_5 = new Random().Next(1, 100) > 90 ? 1 : null,
      div_6 = new Random().Next(1, 100) > 90 ? 1 : null,
      div_7 = new Random().Next(1, 100) > 90 ? 1 : null,
      div_8 = new Random().Next(1, 100) > 90 ? 1 : null,
    };
    return d;
  }).ToList();
    // LstCriterias = Enumerable.Range(1, 4).Select(x =>
    // {
    //   dynamic d = new MyDynamicObject();
    //   d.CRKey = x;
    //   d.CriteriaId = x;
    //   d.Round = 1;
    //   d.CriteriaName = $"Critero {x}";
    //   foreach (var tuple in LstDivisions)
    //   {
    //     d.Datos[$"div_{tuple.Key}"] = new Random().Next(1, 100) > 90 ? 1 : (int?)null;
    //   }
    //   return d;
    // }).Cast<MyDynamicObject>().ToList();
  }

  protected override void OnInitialized()
  {
    FillDS();
    StateHasChanged();
  }

}

@code{

  public class TestKeyValue
  {
    public int Key { get; set; }
    public string Value { get; set; } = string.Empty;
  }

  public class MyConcreteObject
  {
    public string CRKey { get; set; } = string.Empty;
    public int CriteriaId { get; set; }
    public int Round { get; set; }
    public string CriteriaName { get; set; } = string.Empty;
    public int? div_1 { get; set; }
    public int? div_2 { get; set; }
    public int? div_3 { get; set; }
    public int? div_4 { get; set; }
    public int? div_5 { get; set; }
    public int? div_6 { get; set; }
    public int? div_7 { get; set; }
    public int? div_8 { get; set; }
    public int? div_9 { get; set; }
  }

  public class MyDynamicObject : DynamicObject
  {
    public Dictionary<string, object?> Datos = new();

    public override bool TryGetMember(GetMemberBinder binder, out object? result)
    {
      var name = binder.Name;
      return Datos.TryGetValue(name, out result);
    }

    public override bool TrySetMember(SetMemberBinder binder, object? value)
    {
      Datos[binder.Name] = value;
      return true;
    }

    public override IEnumerable<string> GetDynamicMemberNames()
    {
      return Datos?.Keys;
    }
  }

}