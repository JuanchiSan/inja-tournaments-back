@page "/PointDetail"

@attribute [Authorize(Roles = "5")]

@using Microsoft.EntityFrameworkCore
@using Action = Syncfusion.Blazor.Grids.Action
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navManager

<h3>@contenderName Details</h3>
<div>
  <table>
    <tr>
      <td>
        <SfButton @onclick="@OnGoBackClick">Go Back</SfButton>
      </td>
      <td>
        <SfButton @onclick="@OnSaveAllChanges" IsPrimary="true">Save All Changes</SfButton>
      </td>
    </tr>
  </table>
  <div>

  </div>
  <div>
    <span>Points</span>
  </div>
  <div>
    <SfGrid @ref="@GridPoints" TValue="VUserpoint" ID="@nameof(GridPoints)"
            AllowFiltering="true" AllowReordering="true" AllowResizing="true"
            AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
            Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "CsvExport", "Search" })"
            DataSource="@_lstPoints">
      <GridEditSettings AllowEditing="true" Mode="EditMode.Normal"/>
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
      <GridEvents OnToolbarClick="@GridToolbarClick" TValue="VUserpoint"/>
      <GridColumns>
        <GridColumn Field="@nameof(VUserpoint.VupKey)" Visible="false" AllowEditing="false" IsPrimaryKey="true"/>
        <GridColumn Field="@nameof(VUserpoint.Judgename)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Left" HeaderText="Judge" Width="200" AllowEditing="false"/>
        <GridColumn Field="@nameof(VUserpoint.Criterianame)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Left" HeaderText="Criteria" Width="150" AllowEditing="false"/>
        <GridColumn Field="@nameof(VUserpoint.Rounds)" HeaderText="Round" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Width="30" AllowEditing="false"/>
        <GridColumn Field="@nameof(VUserpoint.Slot1)" HeaderText="Slot 1" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70"/>
        <GridColumn Field="@nameof(VUserpoint.Slot2)" HeaderText="Slot 2" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70"/>
        <GridColumn Field="@nameof(VUserpoint.Slot3)" HeaderText="Slot 3" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70"/>
        <GridColumn Field="@nameof(VUserpoint.Slot4)" HeaderText="Slot 4" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70"/>
        <GridColumn Field="@nameof(VUserpoint.Slot5)" HeaderText="Slot 5" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70"/>
        <GridColumn Field="@nameof(VUserpoint.Slot6)" HeaderText="Slot 6" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70" Visible="@_cantslot10"/>
        <GridColumn Field="@nameof(VUserpoint.Slot7)" HeaderText="Slot 7" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70" Visible="@_cantslot10"/>
        <GridColumn Field="@nameof(VUserpoint.Slot8)" HeaderText="Slot 8" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70" Visible="@_cantslot10"/>
        <GridColumn Field="@nameof(VUserpoint.Slot9)" HeaderText="Slot 9" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70" Visible="@_cantslot10"/>
        <GridColumn Field="@nameof(VUserpoint.Slot10)" HeaderText="Slot 10" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="70" Visible="@_cantslot10"/>
        <GridColumn Field="@nameof(VUserpoint.Comment)" HeaderText="Comment" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Left" Width="150"/>
        <GridColumn Field="@nameof(VUserpoint.Totalpoints)" HeaderText="Total Points" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="100" AllowEditing="false"/>
        <GridColumn Field="@nameof(VUserpoint.Maxscore)" HeaderText="Max Score" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" EditorSettings="@(Helper.DFNumericEditCell)" Format="N2" Width="100" AllowEditing="false"/>
      </GridColumns>
    </SfGrid>
  </div>
  <div>
    <span>Deductions</span>
  </div>
  <div>
    <SfGrid @ref="@GridDeductions" TValue="Deduction" ID="@nameof(GridDeductions)"
            Toolbar="@(new List<string> { "Add", "Edit", "Delete", "Cancel", "Update", "ExcelExport", "PdfExport", "CsvExport", "Search" })"
            DataSource="@_lstDeductions">
      <GridEditSettings AllowEditing="true" AllowDeleting="true" AllowAdding="true" Mode="EditMode.Normal"/>
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
      <GridEvents OnActionBegin="@GridDeductionActionBegin" OnToolbarClick="@GridDeductionsToolbarClick" TValue="Deduction"/>
      <GridColumns>
        <GridColumn Field="@nameof(Deduction.Deductionid)" HeaderText="Deduction" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" Format="N0" Width="100" AllowEditing="false" IsPrimaryKey="true" AllowAdding="false"/>
        <GridColumn Field="@nameof(Deduction.Score)" HeaderText="Deduction" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" Format="N0" EditorSettings="@(Helper.DFNumericEditCell)" Width="120" AllowEditing="true"/>
        <GridForeignColumn TValue="VInjauser" Field="@nameof(Deduction.Supuserid)" HeaderText="Judge" Width="200"
                           ForeignDataSource="@_lstJudges" ForeignKeyField="@nameof(VInjauser.Injauserid)" ForeignKeyValue="@nameof(VInjauser.Injausername)"/>
        <GridColumn Field="@nameof(VDeduction.Comment)" HeaderText="Comment" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Left" MinWidth="350" AutoFit="true"/>
      </GridColumns>
    </SfGrid>
  </div>
</div>


@code {

  #region Deductions

  private dbContext _db = new ();
  SfGrid<Deduction>? GridDeductions { get; set; }
  List<Deduction>? _lstDeductions { get; set; }
  List<VInjauser>? _lstJudges { get; set; }

  private void FillLstDeductions()
  {
    _lstJudges = _db.VInjausers.Where(x => x.Eventid == eventId && x.Usertypeid == 6).ToList();
    _lstDeductions = _db
      .Deductions
      .Where(x => x.Cuserid == contenderId && x.Cdivisionid == divisionId && x.Ceventid == eventId && x.Ceventchallengeid == eventchallengeId)
      .ToList();
  }

  private void GridDeductionActionBegin(ActionEventArgs<Deduction> obj)
  {
    if (_lstDeductions == null || _lstJudges == null || !_lstJudges.Any()) return;
    switch (obj.RequestType)
    {
      case Action.Add:
        var nro = !_lstDeductions.Any() ? 1 : _lstDeductions.Max(x => x.Deductionid) + 1;
        obj.RowData.Deductionid = nro;
        obj.RowData.Cdivisionid = Convert.ToInt32(divisionId);
        obj.RowData.Ceventchallengeid = Convert.ToInt32(eventchallengeId);
        obj.RowData.Cuserid = Convert.ToInt32(contenderId);
        obj.RowData.Ceventid = Convert.ToInt32(eventId);
        obj.RowData.Ctypeid = 1;
        obj.RowData.Supeventid = Convert.ToInt32(eventId);
        obj.RowData.Score = 5;
        obj.RowData.Supuserid = Convert.ToInt32(_lstJudges.FirstOrDefault()!.Injauserid);
        obj.RowData.Suptypeid = 6;
        break;
      case Action.Delete:
        break;
    }
  }

  private async Task GridDeductionsToolbarClick(ClickEventArgs args)
  {
    if (GridPoints == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(GridDeductions)}_excelexport":
        await GridPoints.ExportToExcelAsync();
        break;
      case $"{nameof(GridDeductions)}_pdfexport":
        await GridPoints.ExportToPdfAsync(new PdfExportProperties { PageSize = PdfPageSize.A4, PageOrientation = PageOrientation.Landscape });
        break;
      case $"{nameof(GridDeductions)}_csvexport":
        await GridPoints.ExportToCsvAsync();
        break;
    }
  }

  #endregion

  SfGrid<VUserpoint>? GridPoints { get; set; }
  private int? contenderId { get; set; }
  private int? eventId { get; set; }
  private int? eventchallengeId { get; set; }
  private int? divisionId { get; set; }
  private string? contenderName { get; set; }
  private List<VUserpoint> _lstPoints = new();

  private void OnGoBackClick(MouseEventArgs obj)
  {
    navManager.NavigateTo($"/PointView?eid={eventId}&ecid={eventchallengeId}&did={divisionId}");
  }

  private void OnSaveAllChanges(MouseEventArgs obj)
  {
    var dbPoints = _db.Points
      .Include(x => x.Eventjudgechallenge)
      .Where(x => x.Userid == contenderId && x.Eventjudgechallenge.Divisionid == divisionId)
      .ToList();

    foreach (var memItem in _lstPoints.ToArray())
    {
      bool itemOk = true;
      var j = 1;
      while (j <= memItem.Slotcant)
      {
        itemOk = itemOk && memItem.GetType().GetProperty($"Slot{j}")?.GetValue(memItem) != null;
        j++;
      }

      if (!itemOk) continue;

      var dbPoint = dbPoints.FirstOrDefault(x => x.Userid == contenderId && x.Eventjudgechallengeid == memItem.Eventjudgechallengedivisionid);

      if (dbPoint == null) // es uno nuevo
      {
        dbPoint = new Point
        {
          Userid = (int)contenderId!,
          Eventjudgechallengeid = (int)memItem.Eventjudgechallengedivisionid!
        };
        _db.Points.Add(dbPoint);
      }
      var i = 1;
      while (i <= memItem.Slotcant)
      {
        dbPoint.GetType().GetProperty($"Slot{i}")?.SetValue(dbPoint, memItem.GetType().GetProperty($"Slot{i}")?.GetValue(memItem));
        i++;
      }
      dbPoint.Comment = memItem.Comment;
    }

    try
    {
      _db.Deductions.RemoveRange(
        _db
          .Deductions
          .Where(x => x.Cuserid == contenderId && x.Cdivisionid == divisionId && x.Ceventid == eventId && x.Ceventchallengeid == eventchallengeId)
        );
      _lstDeductions?.ForEach(x => _db
        .Deductions.Add(new Deduction
        {
          Ceventid = x.Ceventid,
          Cdivisionid = x.Cdivisionid,
          Cuserid = x.Cuserid,
          Ceventchallengeid = x.Ceventchallengeid,
          Ctypeid = x.Ctypeid,
          Comment = x.Comment,
          Creationdate = DateTime.Now,
          Deductionid = x.Deductionid,
          Score = x.Score,
          Supeventid = x.Supeventid,
          Supuserid = x.Supuserid,
          Suptypeid = x.Suptypeid
        }));
      _db.SaveChanges();
    }
    catch (Exception e)
    {
      Serilog.Log.Error(e, "Error Saving Points");
    }
    OnGoBackClick(obj);
  }

  private async Task GridToolbarClick(ClickEventArgs args)
  {
    if (GridPoints == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(GridPoints)}_excelexport":
        await GridPoints.ExportToExcelAsync();
        break;
      case $"{nameof(GridPoints)}_pdfexport":
        await GridPoints.ExportToPdfAsync(new PdfExportProperties { PageSize = PdfPageSize.A4, PageOrientation = PageOrientation.Landscape });
        break;
      case $"{nameof(GridPoints)}_csvexport":
        await GridPoints.ExportToCsvAsync();
        break;
    }
  }

  private bool _cantslot10;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var tuple = await sessionStorage.GetItemAsync<Tuple<int, string, int, int, int>>(Helper.paramDetailPointView);
      contenderId = tuple.Item1;
      contenderName = tuple.Item2;
      eventId = tuple.Item3;
      eventchallengeId = tuple.Item4;
      divisionId = tuple.Item5;
      _lstPoints = await _db.VUserpoints
        .Where(x => x.Contenderid == contenderId && x.Eventchallengeid == eventchallengeId && x.Eventid == eventId && x.Divisionid == divisionId)
        .ToListAsync();

      _cantslot10 = _lstPoints.Max(x => x.Slotcant) > 5;

      FillLstDeductions();
    }
    catch (Exception e)
    {
      Serilog.Log.Error(e, "Error on OnInitializedAsync");
      navManager.NavigateTo("/PointView");
    }
  }
}