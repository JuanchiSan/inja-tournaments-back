@page "/Contenders"
@using Microsoft.EntityFrameworkCore

@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>Contenders</h3>

<div>
  <SfGrid @ref="ContenderGrid" TValue="Injauser" ID="@nameof(ContenderGrid)"
          AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true"
          AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
          Toolbar="@(new List<string> { "PdfExport", "Print", "Search" })"
          DataSource="_lstUsers">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
    <GridPageSettings PageSize="100" PageSizes="@(new object[] { 100, "All" })"/>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
    <GridSortSettings>
      <GridSortColumns>
        <GridSortColumn Field="@nameof(Injauser.Lastname)"/>
        <GridSortColumn Field="@nameof(Injauser.Firstname)"/>
      </GridSortColumns>
    </GridSortSettings>
    <GridEvents OnRecordDoubleClick="OnRecordDoubleClick" OnToolbarClick="@OnContenderGridToolBarClick" TValue="Injauser"/>
    <GridColumns>
      <GridColumn Field="@nameof(Injauser.Id)" HeaderText="Id" IsIdentity="true" IsPrimaryKey="true" Visible="true" Width="100"/>
      <GridColumn Field="@nameof(Injauser.Lastname)" HeaderText="Last Name" Width="150"/>
      <GridColumn Field="@nameof(Injauser.Firstname)" HeaderText="First" Width="150"/>
      <GridColumn Field="@nameof(Injauser.UserNumber)" HeaderText="User Number" Width="150"/>
      <GridColumn Field="@nameof(Injauser.Mail)" HeaderText="Mail" Width="150" Visible="false"/>
      <GridColumn Field="@nameof(Injauser.Phone)" HeaderText="Phone" Width="150"/>
    </GridColumns>
  </SfGrid>
</div>

@code {

  private void FillDataSources()
  {
    _lstUsers = InjaAdmin.Helper.DB
      .Injausers
      .Include(x => x.Injauserusertypes)
      .Where(z => z.Injauserusertypes.Any(r => r.Typeid == 1))
      .ToList();
  }

  protected override void OnInitialized()
  {
    FillDataSources();
    StateHasChanged();
  }

  #region Grid

  SfGrid<Injauser>? ContenderGrid { get; set; }
  List<Injauser>? _lstUsers { get; set; }

  private async Task OnContenderGridToolBarClick(ClickEventArgs args)
  {
    if (ContenderGrid == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(ContenderGrid)}_excelexport":
        await ContenderGrid.ExportToExcelAsync();
        break;
      case $"{nameof(ContenderGrid)}_pdfexport":
        await ContenderGrid.ExportToPdfAsync(new PdfExportProperties { IncludeTemplateColumn = true });
        break;
      case $"{nameof(ContenderGrid)}_csvexport":
        await ContenderGrid.ExportToCsvAsync();
        break;
    }
  }
  private async Task OnRecordDoubleClick(RecordDoubleClickEventArgs<Injauser> obj)
  {
    await sessionStorage.SetItemAsStringAsync("contender", obj.RowData.Id.ToString());
    navManager.NavigateTo("/ContenderInscription");
  }
  
  #endregion
}