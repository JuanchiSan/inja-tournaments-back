@page "/Contenders"

@attribute [Authorize(Roles = "4,5")]

@using Microsoft.EntityFrameworkCore
@using InjaDTO
@using Microsoft.AspNetCore.WebUtilities
@using Log = Serilog.Log

@* @inject IJSRuntime JsRuntime *@
@inject NavigationManager navManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SfDialogService dialogService

<div class="header-content">
  <h3>Contenders</h3>
  <SfButton Content="Add New Contender" @onclick="@OnNewContenderClick" IsPrimary="true" Disabled="@(_eventId != null)"/>
</div>
<div class="filter-content label-event">
  <div class="filter-input large">
    <span class="label event">Event:</span>
    <SfComboBox @ref="@sfComboEvent" @bind-Value="@(_eventId)" TValue="int?" TItem="Event" PopupWidth="350" DataSource="@(_lstEvents)" CssClass="event-combo-box">
      <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
      <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="@OnEventValueChange"/>
    </SfComboBox>
  </div>
  @if (_eventId != null)
  {
    <div class="filter-input">
      <span class="label user-type">User Type:</span>
      @* @ref="@sfComboUserType"    *@
      <SfComboBox @bind-Value="@(_currentUserTypeId)" AllowCustom="false" ShowClearButton="false" TValue="int" TItem="UserType" 
                  CssClass="user-type-combo-box" PopupWidth="110" DataSource="@(_lstUserTypes)">
        <ComboBoxFieldSettings Text="@nameof(UserType.Name)" Value="@nameof(UserType.Id)"/>
        <ComboBoxEvents TValue="int" TItem="UserType" ValueChange="@OnUserTypeValueChange"/>
      </SfComboBox>
    </div>
    <div class="filter-input">
      <span class="label user-add">Add User:</span>
      <SfAutoComplete TValue="string" TItem="UserDTO" Placeholder="Type to Search" DataSource="@_lstAllUsers" CssClass="user-combo-box">
        <AutoCompleteEvents TItem="UserDTO" TValue="string" OnValueSelect="@Callback"/>
        <AutoCompleteFieldSettings Value="@nameof(UserDTO.Name)"/>
      </SfAutoComplete>
      <SfButton Content="Add User" @onclick="@OnAddUserClick" IsPrimary="true" CssClass="user-add-btn"/>
    </div>
  }
</div>
<div>
  <SfGrid @ref="ContenderGrid" TValue="UserDTO" ID="@nameof(ContenderGrid)"
          AllowFiltering="true" AllowResizing="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
          Toolbar="@(new List<string> { "Delete", "PdfExport", "Print", "Search" })"
          DataSource="_lstEventUsers">
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
    <GridEditSettings AllowDeleting="true"/>
    <GridSortSettings>
      <GridSortColumns>
        <GridSortColumn Field="@nameof(UserDTO.Lastname)"/>
        <GridSortColumn Field="@nameof(UserDTO.Firstname)"/>
      </GridSortColumns>
    </GridSortSettings>
    <GridEvents OnRecordDoubleClick="OnGridDoubleClick" OnActionBegin="OnGridContendersActionBegin" CommandClicked="@OnGridCommandClicked" OnToolbarClick="@OnContenderGridToolBarClick" TValue="UserDTO"/>
    <GridColumns>
      <GridColumn Field="@nameof(UserDTO.Id)" HeaderText="Id" IsIdentity="true" IsPrimaryKey="true" Visible="true" Width="100"/>
      <GridColumn Field="@nameof(UserDTO.Lastname)" HeaderText="Last Name" Width="150"/>
      <GridColumn Field="@nameof(UserDTO.Firstname)" HeaderText="First Name" Width="150"/>
      <GridColumn Field="@nameof(UserDTO.User_Number)" HeaderText="Number" Width="150" Visible="@(_eventId != null && _currentUserTypeId == 1)" />
      <GridColumn Field="@nameof(UserDTO.Mail)" HeaderText="Mail" Width="150"/>
      <GridColumn Field="@nameof(UserDTO.Phone)" HeaderText="Phone" Width="150"/>
      <GridColumn HeaderText="Manage Inscriptions" Width="150" Visible="@(_eventId != null && _currentUserTypeId == 1)">
        <GridCommandColumns>
          <GridCommandColumn Type="CommandButtonType.None" Title="Inscriptions" ID="Inscriptions" ButtonOption="@(new CommandButtonOptions { Content = "Inscriptions" })"/>
        </GridCommandColumns>
      </GridColumn>
    </GridColumns>
  </SfGrid>
</div>

<CNewContender @ref="UserDialog"/>

<style>
.header-content {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
.filter-content {
  display: flex;
  flex-direction: row;
  padding-bottom: 8px;
}
.filter-content .filter-input {
  display: flex;
  flex-direction: row;
  width: 400px;
  align-items: center;
  padding: 2px 10px;
}
.filter-content .filter-input.large {
  width: 500px;
}
.filter-content .filter-input span.label {
  width: 100px;
}
.filter-content .filter-input .label.user-add {
  width: 130px;
}
.user-add-btn {
padding-left: 5px;
}
</style>

@code {
  private dbContext _db = new();

  #region Page

  List<VInjauser>? _dbUsers;
  readonly List<UserDTO> _lstEventUsers = new();
  readonly List<UserDTO> _lstAllUsers = new();
  UserDTO? _userToAdd;
  //UserType? _currentUserType;
  int _currentUserTypeId = 1;
  
  CNewContender? UserDialog;

  private void OnNewContenderClick(MouseEventArgs obj)
  {
    UserDialog?.Open(null);
  }

  private async Task OnAddUserClick(MouseEventArgs obj)
  {
    if (_userToAdd == null || _eventId == null) return;
    if (_lstEventUsers.Any(x => x.Id == _userToAdd.Id))
    {
      await dialogService.AlertAsync("Can't Add this User", "The user already Exists");
      _userToAdd = null;
    }
    else
    {
      var db = new dbContext();
      db.Injauserusertypes.Add(new Injauserusertype
      {
        Eventid = (int)_eventId!,
        Userid = _userToAdd.Id,
        Typeid = _currentUserTypeId
      });
      try
      {
        await db.SaveChangesAsync();
        await FillDS();
        await ContenderGrid?.Refresh()!;
        StateHasChanged();
      }
      catch (Exception e)
      {
        Log.Logger.Error(e, "Error al agregar un usuario a un evento");
      }
    }
  }

  private void Callback(SelectEventArgs<UserDTO> obj)
  {
    _userToAdd = obj.ItemData;
  }

  private async Task FillDS()
  {
    _lstAllUsers.Clear();
    _lstEventUsers.Clear();

    _dbUsers = await _db
      .VInjausers
      .ToListAsync();

    _lstEventUsers.AddRange(
      _dbUsers
        .Where(x=> _eventId == null || _eventId != null && x.Eventid == _eventId && x.Usertypeid == _currentUserTypeId)
        .DistinctBy(y => y.Injauserid)
        .Select(UserDTO.FromVInjaUser)
      );

    if (_eventId != null)
    {
      _lstAllUsers.AddRange(
        _dbUsers
          .Where(z=> _lstEventUsers.All(z1 => z1.Id != z.Injauserid))
          .DistinctBy(y=>y.Injauserid)
                  .Select(UserDTO.FromVInjaUser));
    }
  }

  protected override async Task OnInitializedAsync()
  {
    _lstEvents = await _db
      .Events
      .Where(x => x.Active == true)
      .OrderBy(x => x.Name)
      .ToListAsync();

    var foundQueryParameter = QueryHelpers.ParseQuery(navManager.ToAbsoluteUri(navManager.Uri).Query);
    if (foundQueryParameter.TryGetValue("eid", out var eid))
    {
      _eventId = Convert.ToInt32(eid);
    }

    //_currentUserType = _lstUserTypes.First();
    
    await FillDS();
    await ContenderGrid?.Refresh()!;
    StateHasChanged();
  }

  #endregion

  #region UserType

  List<UserType> _lstUserTypes = new() { new UserType(1, "Contender"), new UserType(3, "Judge"), new UserType(2, "Photographer"), new UserType(4, "Organizer") };
  SfComboBox<int?, UserType?>? sfComboUserType;

  private async Task OnUserTypeValueChange(ChangeEventArgs<int, UserType> args)
  {
    await FillDS();
    await ContenderGrid?.Refresh()!;
    StateHasChanged();
  }

  #endregion

  #region Combo Event

  List<Event>? _lstEvents;
  SfComboBox<int?, Event>? sfComboEvent;
  int? _eventId;

  private async Task OnEventValueChange(ChangeEventArgs<int?, Event> args)
  {
    await FillDS();
    await ContenderGrid?.Refresh()!;
    StateHasChanged();
  }

  #endregion

  #region Grid

  SfGrid<UserDTO>? ContenderGrid { get; set; }
  //List<UserDTO>? _lstUsers { get; set; }

  private async Task OnGridCommandClicked(CommandClickEventArgs<UserDTO> obj)
  {
    if (_eventId == null) return;

    switch (obj.CommandColumn.ID)
    {
      case "Inscriptions":
        await sessionStorage.SetItemAsync("ContenderInscription", Tuple.Create(_eventId, obj.RowData.Id, $"{obj.RowData.Lastname}, {obj.RowData.Firstname}"));
        navManager.NavigateTo("/ContenderInscription");
        break;
      case "Types":
        break;
    }
  }

  private async Task OnContenderGridToolBarClick(ClickEventArgs args)
  {
    if (ContenderGrid == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(ContenderGrid)}_excelexport":
        await ContenderGrid.ExportToExcelAsync();
        break;
      case $"{nameof(ContenderGrid)}_pdfexport":
        await ContenderGrid.ExportToPdfAsync(new PdfExportProperties { IncludeTemplateColumn = true });
        break;
      case $"{nameof(ContenderGrid)}_csvexport":
        await ContenderGrid.ExportToCsvAsync();
        break;
    }
  }

  private async Task OnGridContendersActionBegin(ActionEventArgs<UserDTO> obj)
  {
    if (_eventId == null) return;
    switch (obj.RequestType)
    {
      case Syncfusion.Blazor.Grids.Action.Delete:
        var t = await dialogService.ConfirmAsync(null, "Confirm Delete", new DialogOptions()
        {
          ChildContent = @<div>
                           Are you sure you want to delete <b>@obj.RowData.Name</b> from this Event?<br>
                           All Point (In case if any) will be deleted.
                         </div>
        });
        if (!t)
        {
          obj.Cancel = true;
          return;
        }
        var db = new dbContext();
        var dbUserType = db.Injauserusertypes
          .FirstOrDefault(x => x.Eventid == _eventId && x.Userid == obj.Data.Id && x.Typeid == 1);

        if (dbUserType == null) return;

        var dbUserInscs = db.Userinscriptions
          .Where(x => x.Ueventid == _eventId && x.Ueventid == obj.Data.Id && x.Utypeid == 1);
        var dbUserGroups = db.Persongroups
          .Include(x => x.Group)
          .Where(p => p.Userid == obj.RowData.Id && p.Group.Eventid == _eventId);
        db.Persongroups.RemoveRange(dbUserGroups);
        db.Injauserusertypes.Remove(dbUserType);
        db.Userinscriptions.RemoveRange(dbUserInscs);
        try
        {
          await db.SaveChangesAsync();
        }
        catch (Exception e)
        {
          Log.Logger.Error(e, $"Error borrando un usuario {obj.RowData.Id} Event {_eventId}");
        }

        await FillDS();
        //FillDS2();
        StateHasChanged();
        break;
    }
  }

  private void OnGridDoubleClick(RecordDoubleClickEventArgs<UserDTO> obj)
  {
    UserDialog?.Open(_db.Injausers.Find(obj.RowData.Id));
  }

  #endregion

  struct UserType
  {
    public UserType(int id, string name)
    {
      Id = id;
      Name = name;
    }

    public int Id;
    public string Name;
  }

}