@page "/PointView"
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navManager
@inject HttpClient httpClient
@inject IJSRuntime JsRuntime

@using Microsoft.EntityFrameworkCore
@using Blazored.SessionStorage

<h3>PointView</h3>

<SfDialog Height="600" Width="600" ResizeHandles="@(new[] { ResizeDirection.All })"
          AllowDragging="true" EnableResize="true" ShowCloseIcon="true" @bind-Visible="PhotoDialogVisible">
  <DialogTemplates>
    <Header>
      <table>
        <tr>
          <td>
            <b>Challenge:</b>@_challengeName
          </td>
          <td>
            <b>Contender:</b>@_contenderName
          </td>
        </tr>
      </table>

    </Header>
    <Content>
      <div style="height:500px;width:580px;overflow:scroll;">
        <img src="@PhotoURL" alt="Image">
      </div>
    </Content>
    <FooterTemplate>
    </FooterTemplate>
  </DialogTemplates>
  <DialogEvents Closed="() => { PhotoDialogVisible = false; }"/>
</SfDialog>

<div>
  <div>
    <table>
      <tr>
        <td>Event</td>
        <td width="400">
          <SfComboBox @ref="comboEvents" @bind-Value="@(_eventId)" TValue="int?" TItem="Event"
                      Width="550" PopupWidth="500"
                      DataSource="@(_lstEvents)">
            <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
            <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="() => { _eventChallengeId = null; _divisionId = null;}"/>
          </SfComboBox>
        </td>
        <td>Challenge</td>
        <td width="350">
          <SfComboBox @ref="comboChallenges" @bind-Value="@_eventChallengeId" TValue="int?" TItem="EventChallengeInternal"
                      Width="550" PopupWidth="500"
                      DataSource="@(_lstChallenges)"
                      Query="@(new Query().Where("eventid", "equals", _eventId))">
            <ComboBoxFieldSettings Text="@nameof(EventChallengeInternal.EventChallengeName)" Value="@nameof(EventChallengeInternal.EventChallengeId)"/>
            <ComboBoxEvents TValue="int?" TItem="EventChallengeInternal" ValueChange="OnComboChallengeValueChange"/>
          </SfComboBox>

        </td>
        <td>Competition</td>
        <td>
          <SfComboBox @ref="comboDivisions" @bind-Value="@_divisionId" TValue="int?" TItem="EventChallengeDivisionInternal"
                      Width="550" PopupWidth="500"
                      DataSource="@(_lstDivision)"
                      Query="@(new Query().Where("eventchallengeid", "equals", _eventChallengeId))">
            <ComboBoxFieldSettings Text="@nameof(EventChallengeDivisionInternal.DivisionCompetition)" Value="@nameof(EventChallengeDivisionInternal.DivisionId)"/>
            <ComboBoxEvents TValue="int?" TItem="EventChallengeDivisionInternal"/>
          </SfComboBox>
        </td>
      </tr>
    </table>
  </div>
  <div>
    <SfGrid @ref="@GridPoints" TValue="VGroupUserpoint" ID="@nameof(GridPoints)"
            AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true"
            AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
            Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "CsvExport", "Search" })"
            DataSource="@_lstPoints"
            Query="@GetPointsQuery()">
      <GridEditSettings AllowEditing="true" Mode="EditMode.Normal"/>
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
      <GridSortSettings>
        <GridSortColumns>
          <GridSortColumn Field="@nameof(VGroupUserpoint.Totalpoints)" Direction="SortDirection.Descending"/>
        </GridSortColumns>
      </GridSortSettings>
      <GridEvents CommandClicked="GridPointsCommandClick" OnActionBegin="@GridPointsActionBegin" OnToolbarClick="@GridToolbarClick" TValue="VGroupUserpoint"/>
      <GridColumns>
        <GridColumn Field="@nameof(VGroupUserpoint.Contendername)" HeaderText="Contender" Width="200"/>
        <GridColumn Field="@nameof(VGroupUserpoint.Contendernumber)" HeaderText="Number" Width="200"/>
        <GridColumn Field="@nameof(VGroupUserpoint.NotEval)" HeaderText="Not Evals" Width="150"/>
        <GridColumn Field="@nameof(VGroupUserpoint.Eval)" HeaderText="Evals" Width="150"/>
        <GridColumn Field="@nameof(VGroupUserpoint.Totalpoints)" HeaderText="Totalpoints" Width="150"/>
        <GridColumn Field="@nameof(VGroupUserpoint.Maxscore)" HeaderText="Maxscore" Width="150"/>
        <GridColumn HeaderText="Manage Records" Width="150">
          <GridCommandColumns>
            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions { IconCss = "e-icons e-edit", CssClass = "e-flat" })"/>
            <GridCommandColumn Type="CommandButtonType.None" ButtonOption="@(new CommandButtonOptions { Content = "Photo" })"/>
          </GridCommandColumns>
        </GridColumn>
      </GridColumns>
    </SfGrid>
  </div>
</div>

@code {
  string? _challengeName { get; set; }
  string? _contenderName { get; set; }

  bool PhotoDialogVisible { get; set; }
  string PhotoURL { get; set; } = string.Empty;

  #region Grid

  SfGrid<VGroupUserpoint>? GridPoints { get; set; }
  List<VGroupUserpoint> _lstPoints = new();

  private async Task FillLstDivision()
  {
    if (_eventChallengeId != null)
    {
      _lstDivision = await new dbContext()
        .Eventchallengedivisions
        .Include(x => x.Division)
        .ThenInclude(y => y.Competitiontype)
        .Where(x => x.Eventchallengeid == _eventChallengeId)
        .Select(q => new EventChallengeDivisionInternal
        {
          DivisionId = q.Divisionid,
          DivisionCompetition = $"{q.Division.Competitiontype.Name}, {q.Division.Name}",
          EventChallengeId = q.Eventchallengeid
        })
        .ToListAsync();
    }
    if ((_divisionId == null && _lstDivision.Any()) || (_divisionId != null && _lstDivision.All(x => x.DivisionId != _divisionId)))
    {
      _divisionId = _lstDivision.First().DivisionId;
    }
  }

  private async Task OnComboChallengeValueChange(ChangeEventArgs<int?, EventChallengeInternal> obj)
  {
    await FillLstDivision();
    if (comboDivisions != null)
      await comboDivisions.RefreshDataAsync();
  //_divisionId = null;
  }

  private bool HasPhoto(int contenderId)
  {
    var fila = Helper.DB.Eventchallenges.FirstOrDefault(x => x.Id == _eventChallengeId);
    if (fila == null) return false;
    var dbResult = Helper.DB.Photos
      .Where(x => x.Eventid == _eventId && x.Challengeid == fila.Challengeid && x.Divisionid == _divisionId && x.Contenderid == contenderId)
      .OrderByDescending(x => x.Created)
      .ToList();

    return dbResult.Any() && dbResult.First().PhotoUrl != null;
  }

  private async Task GridPointsCommandClick(CommandClickEventArgs<VGroupUserpoint> obj)
  {
    var fila = await new dbContext().Eventchallenges.FirstOrDefaultAsync(x => x.Id == _eventChallengeId);

    if (fila != null)
    {
      var cosa = await new dbContext().Photos
        .Where(x => x.Eventid == _eventId && x.Challengeid == fila.Challengeid && x.Divisionid == _divisionId && x.Contenderid == obj.RowData.Contenderid)
        .OrderByDescending(x => x.Created)
        .ToListAsync();
      
      if (!cosa.Any()|| cosa.First().PhotoUrl == null) 
      {
        await JsRuntime.InvokeVoidAsync("alert", "No hay foto para este registro");
        return; // mostrar cartel de que no hay foto
      }
   
      PhotoURL = cosa.First().PhotoUrl!.Replace("DownloadPhotoFile", "GetImage") ?? string.Empty;
      _contenderName = obj.RowData.Contendername;
      _challengeName = obj.RowData.Eventchallengename;
      PhotoDialogVisible = true;
    }
  }

  private async Task GridPointsActionBegin(ActionEventArgs<VGroupUserpoint> obj)
  {
    if (obj.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
    {
      obj.Cancel = true;
      await sessionStorage.SetItemAsync(Helper.paramDetailPointView, Tuple.Create(obj.Data.Contenderid, obj.Data.Contendername, obj.Data.Eventid, obj.Data.Eventchallengeid, obj.Data.Divisionid));
      navManager.NavigateTo("/PointDetail");
    }
  }

  private Query GetPointsQuery()
  {
    if (_eventId != null && _eventChallengeId != null && _divisionId != null)
    {
      return new Query()
        .Where("eventid", "equals", _eventId)
        .Where("eventchallengeid", "equals", _eventChallengeId)
        .Where("divisionid", "equals", _divisionId);
    }
    return new Query().Where("eventid", "equals", -1);
  }

  private async Task GridToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
  {
    if (GridPoints == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(GridPoints)}_excelexport":
        await GridPoints.ExportToExcelAsync();
        break;
      case $"{nameof(GridPoints)}_pdfexport":
        await GridPoints.ExportToPdfAsync();
        break;
      case $"{nameof(GridPoints)}_csvexport":
        await GridPoints.ExportToCsvAsync();
        break;
    }
  }

  #endregion

  private SfComboBox<int?, Event>? comboEvents { get; set; }
  private SfComboBox<int?, EventChallengeInternal>? comboChallenges { get; set; }
  private SfComboBox<int?, EventChallengeDivisionInternal>? comboDivisions { get; set; }

  #region general

  private async Task FillDS()
  {
    _lstEvents = await new dbContext()
      .Events
      .OrderBy(x => x.Name)
      .ToListAsync();

    _lstPoints = await new dbContext()
      .VGroupUserpoints
      .ToListAsync();

    _lstChallenges = await new dbContext()
      .Eventchallenges
      .Include(x => x.Challenge)
      .OrderBy(z => z.Name)
      .Select(y => new EventChallengeInternal
      {
        EventChallengeId = y.Id,
        EventChallengeName = y.Name,
        EventId = y.Eventid
      })
      .ToListAsync();

    await FillLstDivision();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (await sessionStorage.ContainKeyAsync(Helper.paramDetailPointView))
    {
      var tuple = await sessionStorage.GetItemAsync<Tuple<int, string, int, int, int>>(Helper.paramDetailPointView);
      _eventId = tuple.Item3;
      _eventChallengeId = tuple.Item4;
      _divisionId = tuple.Item5;
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await FillDS();
  }

  #endregion

  #region Event

  int? _eventId;
  List<Event> _lstEvents = new();

  #endregion

  #region Challenges

  int? _eventChallengeId;
  List<EventChallengeInternal> _lstChallenges = new();

  #endregion

  #region Division

  int? _divisionId;
  List<EventChallengeDivisionInternal> _lstDivision = new();

  #endregion

  public class EventChallengeInternal
  {
    public int? EventChallengeId { get; set; }
    public string? EventChallengeName { get; set; }
    public int? EventId { get; set; }
  }

  public class EventChallengeDivisionInternal
  {
    public int? DivisionId { get; set; }
    public string? DivisionCompetition { get; set; }
    public int? EventChallengeId { get; set; }
  }

}