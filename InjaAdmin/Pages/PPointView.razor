@page "/PointView"

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navManager
@inject IJSRuntime JsRuntime

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

<h3>PointView</h3>

<SfDialog Height="600" Width="600" ResizeHandles="@(new[] { ResizeDirection.All })"
          AllowDragging="true" EnableResize="true" ShowCloseIcon="true" @bind-Visible="PhotoDialogVisible">
  <DialogTemplates>
    <Header>
      <table>
        <tr>
          <td>
            <b>Challenge:</b>@_challengeName
          </td>
          <td>
            <b>Contender:</b>@_contenderName
          </td>
        </tr>
      </table>

    </Header>
    <Content>
      <div style="height:500px;width:580px;overflow:scroll;">
        <img src="@PhotoURL" alt="Image">
      </div>
    </Content>
    <FooterTemplate>
    </FooterTemplate>
  </DialogTemplates>
  <DialogEvents Closed="() => { PhotoDialogVisible = false; }"/>
</SfDialog>

<div>
  <div>
    <table>
      <tr>
        <td>Event</td>
        <td style="width: 400px">
          <SfComboBox @ref="comboEvents" @bind-Value="@(_eventId)" TValue="int?" TItem="Event"
                      PopupWidth="450" DataSource="@_lstEvents">
            <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
            <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="OnComboEventValueChange"/>
          </SfComboBox>
        </td>
        <td>Challenge</td>
        <td style="width: 350px">
          <SfComboBox @ref="comboChallenges" @bind-Value="@_eventChallengeId" TValue="int?" TItem="EventChallengeInternal"
                      PopupWidth="400" DataSource="@_lstChallenges">
            <ComboBoxFieldSettings Text="@nameof(EventChallengeInternal.EventChallengeName)" Value="@nameof(EventChallengeInternal.EventChallengeId)"/>
            <ComboBoxEvents TValue="int?" TItem="EventChallengeInternal" ValueChange="OnComboChallengeValueChange"/>
          </SfComboBox>

        </td>
        <td>Competition</td>
        <td>
          <SfComboBox @ref="comboDivisions" @bind-Value="@_divisionId" TValue="int?" TItem="EventChallengeDivisionInternal"
                      Width="550" PopupWidth="500"
                      DataSource="@_lstDivision">
            <ComboBoxFieldSettings Text="@nameof(EventChallengeDivisionInternal.DivisionCompetition)" Value="@nameof(EventChallengeDivisionInternal.DivisionId)"/>
            <ComboBoxEvents TValue="int?" TItem="EventChallengeDivisionInternal" ValueChange="OnComboDivisionValueChange"/>
          </SfComboBox>
        </td>
      </tr>
    </table>
  </div>
  <div>
    <SfGrid @ref="@GridPoints" TValue="VUserpointGroup" ID="@nameof(GridPoints)"
            AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowExcelExport="true"
            AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
            Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "CsvExport", "Search" })"
            DataSource="@_lstPoints">
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
      <GridSortSettings>
        <GridSortColumns>
          <GridSortColumn Field="@nameof(VUserpointGroup.Totalpoints)" Direction="SortDirection.Descending"/>
        </GridSortColumns>
      </GridSortSettings>
      <GridEvents CommandClicked="GridPointsCommandClick" RowDataBound="Callback" OnToolbarClick="@GridToolbarClick" TValue="VUserpointGroup"/>
      <GridColumns>
        <GridColumn Field="@nameof(VUserpointGroup.Contendername)" HeaderText="Contender" Width="200"/>
        <GridColumn Field="@nameof(VUserpointGroup.Contendernumber)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" HeaderText="Number" Width="200"/>
        <GridColumn Field="@nameof(VUserpointGroup.NotEval)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" HeaderText="Not Evals" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Eval)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center" HeaderText="Evals" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Totalpoints)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" HeaderText="Total Points" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Deductions)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" HeaderText="Deductions" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.FinalPoint)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" HeaderText="Final Points" Width="150"/>
        <GridColumn Field="@nameof(VUserpointGroup.Maxscore)" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" HeaderText="Maxscore" Width="150"/>
        <GridColumn HeaderText="Manage Records" Width="150">
          <GridCommandColumns>
            <GridCommandColumn Type="CommandButtonType.None" ID="Edit" ButtonOption="@(new CommandButtonOptions { IconCss = "e-icons e-edit", CssClass = "e-flat" })"/>
            <GridCommandColumn Type="CommandButtonType.None" ID="Photo" ButtonOption="@(new CommandButtonOptions { Content = "Photo", CssClass = "e-photo" })"/>
          </GridCommandColumns>
        </GridColumn>
      </GridColumns>
    </SfGrid>
  </div>
</div>

<style>
    .e-removeEditcommand .e-unboundcell .e-unboundcelldiv button.e-photo {
        display: none;
    }
</style>

@code {
  private dbContext _db = new();
  
  string? _challengeName { get; set; }
  string? _contenderName { get; set; }

  bool PhotoDialogVisible { get; set; }
  string PhotoURL { get; set; } = string.Empty;

  #region Grid

  SfGrid<VUserpointGroup>? GridPoints { get; set; }
  List<VUserpointGroup> _lstPoints = new();

  private void Callback(RowDataBoundEventArgs<VUserpointGroup> obj)
  {
    if (obj.Data.CantPhotos == 0)
    {
      obj.Row.AddClass(new [] { "e-removeEditcommand" });
    }
  }

  private bool HasPhoto(int contenderId)
  {
    var fila = _db.Eventchallenges.FirstOrDefault(x => x.Id == _eventChallengeId);
    if (fila == null) return false;
    var dbResult = _db.Photos
      .Where(x => x.Eventid == _eventId && x.Challengeid == fila.Challengeid && x.Divisionid == _divisionId && x.Contenderid == contenderId)
      .OrderByDescending(x => x.Created)
      .ToList();

    return dbResult.Any() && dbResult.First().PhotoUrl != null;
  }

  private async Task GridPointsCommandClick(CommandClickEventArgs<VUserpointGroup> obj)
  {
    var fila = await new dbContext().Eventchallenges.FirstOrDefaultAsync(x => x.Id == _eventChallengeId);

    switch (obj.CommandColumn.ID)
    {
      case "Photo" when fila != null:
      {
        var cosa = await new dbContext().Photos
          .Where(x => x.Eventid == _eventId && x.Challengeid == fila.Challengeid && x.Divisionid == _divisionId && x.Contenderid == obj.RowData.Contenderid)
          .OrderByDescending(x => x.Created)
          .ToListAsync();

        if (!cosa.Any() || cosa.First().PhotoUrl == null)
        {
          await JsRuntime.InvokeVoidAsync("alert", "No hay foto para este registro");
          return; // mostrar cartel de que no hay foto
        }

        PhotoURL = cosa.First().PhotoUrl!.Replace("DownloadPhotoFile", "GetImage");
        _contenderName = obj.RowData.Contendername;
        _challengeName = obj.RowData.Eventchallengename;
        PhotoDialogVisible = true;
        break;
      }
      case "Edit":
        await sessionStorage.SetItemAsync(Helper.paramDetailPointView, Tuple.Create(obj.RowData.Contenderid, obj.RowData.Contendername, obj.RowData.Eventid, obj.RowData.Eventchallengeid, obj.RowData.Divisionid));
        navManager.NavigateTo("/PointDetail");
        break;
    }
  }

  private async Task GridToolbarClick(ClickEventArgs args)
  {
    if (GridPoints == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(GridPoints)}_excelexport":
        await GridPoints.ExportToExcelAsync();
        break;
      case $"{nameof(GridPoints)}_pdfexport":
        await GridPoints.ExportToPdfAsync();
        break;
      case $"{nameof(GridPoints)}_csvexport":
        await GridPoints.ExportToCsvAsync();
        break;
    }
  }

  #endregion

  #region General

  private async Task FillPoints()
  {
    if (_eventChallengeId != null && _divisionId != null)
    {
      _lstPoints = await new dbContext()
        .VUserpointGroups
        .Where(x => x.Eventchallengeid == _eventChallengeId && x.Divisionid == _divisionId)
        .ToListAsync();
    }
  }

  private async Task FillDS()
  {
    await FillLstEvents();
  }

  protected override Task OnInitializedAsync()
  {
    var foundQueryParameter = QueryHelpers.ParseQuery(navManager.ToAbsoluteUri(navManager.Uri).Query);

    if (foundQueryParameter.TryGetValue("eid", out var eid) &&
        foundQueryParameter.TryGetValue("ecid", out var ecid) &&
        foundQueryParameter.TryGetValue("did", out var did))
    {
      _eventId = Convert.ToInt32(eid);
      _eventChallengeId = Convert.ToInt32(ecid);
      _divisionId = Convert.ToInt32(did);
    }

    Task.Run(async () => await FillDS()).Wait(5000);
    Task.Run(async () => await FillLstChallenges()).Wait(5000);
    Task.Run(async () => await FillLstDivision()).Wait(5000);
    Task.Run(async () => await FillPoints()).Wait(5000);

    return base.OnInitializedAsync();
  }

  #endregion General

  #region Event

  private async Task FillLstEvents()
  {
    _lstEvents = await new dbContext()
      .Events
      .OrderBy(x => x.Name)
      .ToListAsync();

    _eventId ??= _lstEvents.First().Id;
  }

  int? _eventId;
  List<Event> _lstEvents = new();
  private SfComboBox<int?, Event>? comboEvents { get; set; }

  private async Task OnComboEventValueChange(ChangeEventArgs<int?, Event> obj)
  {
    await FillLstChallenges();
  }

  #endregion

  #region Challenges

  int? _eventChallengeId;
  List<EventChallengeInternal> _lstChallenges = new();
  private SfComboBox<int?, EventChallengeInternal>? comboChallenges { get; set; }

  private async Task FillLstChallenges()
  {
    if (_eventId == null) return;

    _lstChallenges = await new dbContext()
      .Eventchallenges
      .Include(x => x.Challenge)
      .Where(x => x.Eventid == _eventId)
      .OrderBy(z => z.Name)
      .Select(y => new EventChallengeInternal
      {
        EventChallengeId = y.Id,
        EventChallengeName = y.Name,
        EventId = y.Eventid
      })
      .ToListAsync();

    if ((_eventChallengeId == null && _lstChallenges.Any()) || (_eventChallengeId != null && _lstChallenges.All(x => x.EventChallengeId != _eventChallengeId)))
      _eventChallengeId = _lstChallenges.First().EventChallengeId;
  }

  private async Task OnComboChallengeValueChange(ChangeEventArgs<int?, EventChallengeInternal> obj)
  {
    await FillLstDivision();
  }

  #endregion

  #region Division

  int? _divisionId;
  List<EventChallengeDivisionInternal> _lstDivision = new();
  private SfComboBox<int?, EventChallengeDivisionInternal>? comboDivisions { get; set; }

  private async Task OnComboDivisionValueChange(ChangeEventArgs<int?, EventChallengeDivisionInternal> obj)
  {
    await FillPoints();
  }

  private async Task FillLstDivision()
  {
    if (_eventChallengeId == null) return;

    var oldDivId = _divisionId;
    
    _lstDivision = await new dbContext()
      .Eventchallengedivisions
      .Include(x => x.Division)
      .ThenInclude(y => y.Competitiontype)
      .Where(x => x.Eventchallengeid == _eventChallengeId)
      .Select(q => new EventChallengeDivisionInternal
      {
        DivisionId = q.Divisionid,
        DivisionCompetition = $"{q.Division.Competitiontype.Name}, {q.Division.Name}",
        EventChallengeId = q.Eventchallengeid
      })
      .ToListAsync();

    if ((_divisionId == null && _lstDivision.Any()) || (_divisionId != null && _lstDivision.All(x => x.DivisionId != _divisionId)))
    {
      _divisionId = _lstDivision.First().DivisionId;
    }
    if (oldDivId != null && oldDivId == _divisionId) // tengo que refrescar la lista de puntos;
      await FillPoints();
  }

  #endregion

  #region Additional Classes

  public class EventChallengeInternal
  {
    public int? EventChallengeId { get; set; }
    public string? EventChallengeName { get; set; }
    public int? EventId { get; set; }
  }

  public class EventChallengeDivisionInternal
  {
    public int? DivisionId { get; set; }
    public string? DivisionCompetition { get; set; }
    public int? EventChallengeId { get; set; }
  }

  #endregion

}