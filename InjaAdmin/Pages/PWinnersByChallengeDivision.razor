@page "/WinByChallengeDivision"

@attribute [Authorize(Roles = "4,5")]

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

@inject IJSRuntime JsRuntime
@inject NavigationManager navManager

<h3>Winners By Challenge Division</h3>

<div>
  <div>
    <table>
      <tr>
        <td style="width: 150px">
          <span>Event:</span>
        </td>
        <td style="width: 400px">
          <SfComboBox @ref="@sfComboEvent" @bind-Value="@(_eventId)" TValue="int?" TItem="Event"
                      PopupWidth="400" DataSource="@(_lstEvents)">
            <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
            <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="@OnEventValueChange"/>
          </SfComboBox>
        </td>
        <td>
          <SfButton Content="Winners of Winners" @onclick="@(() => navManager.NavigateTo($"WinnersOfWinners{( _eventId != null ? $"?eid={_eventId}" : string.Empty)}"))"/>
        </td>
        <td>
          <SfButton Content="Grand Champion" @onclick="@(() => navManager.NavigateTo($"GrandChampion{( _eventId != null ? $"?eid={_eventId}" : string.Empty)}"))"/>
        </td>
      </tr>
    </table>
  </div>
  <div>
    <SfGrid @ref="@DataGrid" TValue="VWinnersByChallengeDivision" ID="@nameof(DataGrid)"
            AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowSorting="true"
            AllowExcelExport="true" AllowPdfExport="true" AllowGrouping="true"
            Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "CsvExport" })"
            DataSource="@_lstWinners">
      <GridSortSettings>
        <GridSortColumns>
          <GridSortColumn Field="@nameof(VWinnersByChallengeDivision.Eventchallengename)"/>
          <GridSortColumn Field="@nameof(VWinnersByChallengeDivision.Divisionname)"/>
          <GridSortColumn Field="@nameof(VWinnersByChallengeDivision.Rank)"/>
        </GridSortColumns>
      </GridSortSettings>
      <GridGroupSettings Columns="@(new[] { nameof(VWinnersByChallengeDivision.Eventchallengename), nameof(VWinnersByChallengeDivision.Divisionname) })"/>
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridEditSettings AllowAdding="false" AllowEditing="false"/>
      <GridEvents OnToolbarClick="@GridToolbarClick" TValue="VWinnersByChallengeDivision"/>
      <GridColumns>
        <GridColumn Field="@nameof(VWinnersByChallengeDivision.Eventchallengename)" HeaderText="Challenge" Width="150"/>
        <GridColumn Field="@nameof(VWinnersByChallengeDivision.Divisionname)" HeaderText="Division" Width="150"/>
        <GridColumn Field="@nameof(VWinnersByChallengeDivision.Contendername)" HeaderText="Contender" Width="250"/>
        <GridColumn Field="@nameof(VWinnersByChallengeDivision.Contendernumber)" HeaderText="Number" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" Width="70"/>
        <GridColumn Field="@nameof(VWinnersByChallengeDivision.Totalpoints)" HeaderText="Points" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" Format="N2" Width="70"/>
        <GridColumn Field="@nameof(VWinnersByChallengeDivision.Deductions)" HeaderText="Deductions" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" Format="N2" Width="70"/>
        <GridColumn Field="@nameof(VWinnersByChallengeDivision.FinalPoint)" HeaderText="Final" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" Format="N2" Width="70"/>
        <GridColumn Field="@nameof(VWinnersByChallengeDivision.Rank)" HeaderText="Rank" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Right" Format="N0" Width="70"/>
      </GridColumns>
    </SfGrid>
  </div>
</div>

@code {
  private readonly dbContext _db = new();
  
  SfGrid<VWinnersByChallengeDivision>? DataGrid { get; set; }
  List<VWinnersByChallengeDivision>? _lstWinners { get; set; }

  
  private async Task FillDS()
  {
    _lstWinners?.Clear();
    _lstEvents = await _db.Events.ToListAsync();
    if (_eventId != null)
    {
      _lstWinners = _db.VWinnersByChallengeDivisions.Where(x => x.Eventid == _eventId).ToList();
    }
    await InvokeAsync(StateHasChanged);
  }
  
  #region Events

  List<Event>? _lstEvents;
  SfComboBox<int?, Event>? sfComboEvent { get; set; }
  private int? _eventId { get; set; }

  private async Task OnEventValueChange(ChangeEventArgs<int?, Event> arg)
  {
    await FillDS();
  }

  #endregion  
  
  protected override void OnInitialized()
  {
    var foundQueryParameter = QueryHelpers.ParseQuery(navManager.ToAbsoluteUri(navManager.Uri).Query);

    if (foundQueryParameter.TryGetValue("eid", out var eid))
    {
      _eventId = Convert.ToInt32(eid);
    }
    InvokeAsync(FillDS);
 }

  private async Task GridToolbarClick(ClickEventArgs args)
  {
    if (DataGrid == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(DataGrid)}_excelexport":
        await DataGrid.ExportToExcelAsync();
        break;
      case $"{nameof(DataGrid)}_pdfexport":
        await DataGrid.ExportToPdfAsync();
        break;
      case $"{nameof(DataGrid)}_csvexport":
        await DataGrid.ExportToCsvAsync();
        break;
    }
  }

}