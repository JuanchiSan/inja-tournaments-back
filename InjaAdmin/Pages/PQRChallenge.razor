@page "/QRChallenge"

@using Syncfusion.Blazor.BarcodeGenerator

@inject IJSRuntime JsRuntime
@inject NavigationManager navManager

<h3 class="print-hide">QRs By Chanllenges</h3>

<div>
  <div class="print-hide">
    <span>Event</span>
    <SfComboBox @bind-Value="@(_eventId)" TValue="int?" TItem="Event"
                Width="350" PopupWidth="350" DataSource="@(_lstEvents)">
      <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
      <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="@OnEventValueChange"/>
    </SfComboBox>
  </div>
  <div class="print-hide">
    <span>Challenges</span>
    <SfComboBox @bind-Value="@(_challengeDivisionKey)" TValue="string?" TItem="InternalChallengeDivision"
                Width="350" PopupWidth="350" DataSource="@(_lstChallengeDivision)"
                Query="@(new Query().Where("eventid", "equals", _eventId))">
      <ComboBoxFieldSettings Text="@nameof(InternalChallengeDivision.ChallengeDivisionName)" Value="@nameof(InternalChallengeDivision.Key)"/>
      <ComboBoxEvents TValue="string?" TItem="InternalChallengeDivision" ValueChange="@OnEventChallengeDivisionValueChange"/>
    </SfComboBox>
  </div>
  <div class="section">
    <h2 class="print-hide section-title">QR List</h2>
    <p class="print-hide helper">(Press Ctrl+P to print the complete listing)</p>
  </div>
  @{
    if (_lstUsersToPrint is {Count: > 0} && _lstUsersToPrint.Count > PageSize)
    {
      <div>
        <SfPager @ref="@Page" PageSize="@PageSize" TotalItemsCount="_lstUsersToPrint.Count" ItemClick="HandleNumericClick"/>
      </div>
    }
  }
  <div class="user-list">
    @{
      if (_lstUsersToPrint is {Count: > 0 })
      {
        foreach (var user in _lstUsersToPrint.Skip(_skipValue).Take(_takeValue).ToList())
        {
          var strFinal = $"{Helper.strURL}eventId={user.Eventid}&challengeId={user.Challengeid}&divisionId={user.Divisionid}&contenderId={user.Userid}&guid={Guid.NewGuid()}";
          <div class="user-data">
            <div class="user-challenge">@user.Eventchallengename</div>
            <div class="user-division">@user.Divisionname</div>
            <div class="user-qr">
              <SfQRCodeGenerator Width="150px" Height="150px" Value="@(strFinal)">
                <QRCodeGeneratorDisplayText Text="@(user.Usernumber ?? "-")"/>
              </SfQRCodeGenerator>
            </div>
          </div>
        }
      }
      else
      {
        <p>No items for the selected event.</p>
      }
    }
  </div>
</div>

<style>
  .user-list {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  }
  .user-data {
    flex-direction: column;
    display: flex;
    align-items: center;
  }
  .user-division {
    z-index: 10;
  }
  .user-qr {
    top: -14px;
    position: relative;
    z-index: 1;
  }
  .section-title {
    font-size: 1.3em;
  }
  .section {
    display: flex;
    flex-direction: row;
    align-items: baseline;
    margin-top: 1em;
  }
  .helper {
    font-size: .8em;
    margin-left: 1em;
  }
  
</style>

@code {

  int? _eventId { get; set; }
  List<Event>? _lstEvents { get; set; }

  List<VUserinscriptionPlana>? _lstUsersToPrint { get; set; }
  string? _challengeDivisionKey { get; set; }
  List<InternalChallengeDivision>? _lstChallengeDivision { get; set; }

  SfPager? Page;

  //public int pageSize { get; set; }
  private readonly int PageSize = 20;
  private int _skipValue;
  private int _takeValue = 20;

  private void HandleNumericClick(PagerItemClickEventArgs args)
  {
    _skipValue = (args.CurrentPage * Page!.PageSize) - Page.PageSize;
    _takeValue = Page.PageSize;
  }

  private void FillDataSources()
  {
    _lstChallengeDivision = null;
    if (_eventId == null) return;
    _lstChallengeDivision = Helper.DB
      .VEventchallengedivisionPlanas
      .Where(x => x.Eventid == _eventId)
      .Select(y => new InternalChallengeDivision
      {
        EventId = (int)y.Eventid!,
        ChallengeId = (int)y.Challengeid!,
        DivisionId = (int)y.Divisionid!,
        EventChallengeId = (int)y.Eventchallengeid!,
        ChallengeDivisionName = $"{y.Eventchallengename} - {y.Divisionname}"
      })
      .Distinct()
      .ToList()
      .OrderBy(z => z.ChallengeDivisionName).ToList();
  }

  protected override void OnInitialized()
  {
    _lstEvents = Helper.DB.Events.ToList();

    FillDataSources();
    StateHasChanged();
  }

  #region ComboBox

  private void OnEventValueChange(ChangeEventArgs<int?, Event> args)
  {
    FillDataSources();
    StateHasChanged();
  }

  private void OnEventChallengeDivisionValueChange(ChangeEventArgs<string?, InternalChallengeDivision> args)
  {
    _lstUsersToPrint = null;
    if (args.ItemData != null)
      _lstUsersToPrint = Helper.DB.VUserinscriptionPlanas
        .Where(x => x.Eventchallengeid == args.ItemData.EventChallengeId && x.Divisionid == args.ItemData.DivisionId)
        .OrderBy(x => x.Usernumber)
        .ThenBy(y => y.Eventchallengeid)
        .ToList();

    _skipValue = 0;
    if (Page != null)
      Page.CurrentPage = 1;

    StateHasChanged();
  }

  #endregion

}

@code {

  public class InternalChallengeDivision
  {
    public string Key => $"{EventChallengeId}_{ChallengeId}_{DivisionId}";
    public int EventId { get; set; }
    public int EventChallengeId { get; set; }
    public int ChallengeId { get; set; }
    public int DivisionId { get; set; }

    public string ChallengeDivisionName { get; set; } = string.Empty;
  }

}