@page "/EventConfig"

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navManager

<h3>Event Config</h3>

<div>
  <div>
    <table>
      <tr>
        <td>
          Event
        </td>
        <td width="500">
          <SfComboBox href="@sfComboEvent" @bind-Value="@(_eventId)" TValue="int?" TItem="Event"
                      Width="550" PopupWidth="500"
                      DataSource="@(_lstEvents)">
            <ComboBoxFieldSettings Text="@nameof(Event.Name)" Value="@nameof(Event.Id)"/>
            <ComboBoxEvents TValue="int?" TItem="Event" ValueChange="@OnEventValueChange"/>
          </SfComboBox>
        </td>
        <td>
          Desde: @_eventDesde
        </td>
        <td>
          Hasta: @_eventHasta
        </td>
      </tr>
    </table>
  </div>
  <div>
    <SfButton Content="Add Challenge" @onclick="@OnAddChallengeClick"/>
  </div>
  <div>
    <SfGrid @ref="@EventChallengeDivisionGrid" TValue="VEventchallengedivision" ID="@nameof(EventChallengeDivisionGrid)"
            AllowPaging="true" AllowFiltering="true" AllowReordering="true" AllowResizing="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
            Toolbar="@(new List<string> { "ExcelExport", "PdfExport", "CsvExport", "Search" })"
            Query="@GetChallengeDivisionQuery()">
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridPageSettings PageSize="100" PageSizes="@(new object[] { 100, "All" })"/>
      <SfDataManager AdaptorInstance="@typeof(EventChallengeDivisionAdaptor)" Adaptor="Adaptors.CustomAdaptor"/>
      <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
      <GridSortSettings>
        <GridSortColumns>
          <GridSortColumn Field="@nameof(VEventchallengedivision.Competitiontypename)"/>
          <GridSortColumn Field="@nameof(VEventchallengedivision.Challengename)"/>
        </GridSortColumns>
      </GridSortSettings>
      <GridEvents OnToolbarClick="@OnEventChallengeGridToolBarClick" CommandClicked="OnGridCommandClicked" OnActionBegin="OnGridActionBegin" TValue="VEventchallengedivision"/>
      <GridColumns>
        <GridColumn Field="@nameof(VEventchallengedivision.Eventchallengename)" HeaderText="Event Challenge" Width="150"/>
        <GridColumn Field="@nameof(VEventchallengedivision.Eventchallengestartdate)" HeaderText="Star Date" Format="dd/MM/yyyy HH:mm" Width="150"/>
        <GridColumn Field="@nameof(VEventchallengedivision.Eventchallengeenddate)" HeaderText="End Date" Format="dd/MM/yyyy HH:mm" Width="150"/>
        <GridColumn Field="@nameof(VEventchallengedivision.Challengename)" HeaderText="Challenge Type" Width="150"/>
        <GridColumn Field="@nameof(VEventchallengedivision.Competitiontypename)" HeaderText="Competition" Width="150"/>
        <GridColumn Field="@nameof(VEventchallengedivision.Divisionnames)" HeaderText="Division" Width="200"/>
        <GridColumn HeaderText="Manage Records" Width="150">
          <GridCommandColumns>
            <GridCommandColumn Type="CommandButtonType.Edit" Title="Edit" ButtonOption="@(new CommandButtonOptions { IconCss = "e-icons e-edit", CssClass = "e-flat" })"/>
            <GridCommandColumn Type="CommandButtonType.None" Title="Judges"/>
          </GridCommandColumns>
        </GridColumn>
      </GridColumns>
    </SfGrid>
  </div>

  @* --OnRecordDoubleClick="@OnGridRowDoubleClick" *@
</div>


@code {

  #region MyRegion

  private async Task OnAddChallengeClick(MouseEventArgs obj)
  {
    await sessionStorage.SetItemAsync(Helper.paramChellengeName, Tuple.Create(_eventId, -1, string.Empty));
    navManager.NavigateTo("/EventChallengeConfig");
  }

  #endregion

  #region Grid

  SfGrid<VEventchallengedivision>? EventChallengeDivisionGrid { get; set; }

  private async Task OnGridCommandClicked(CommandClickEventArgs<VEventchallengedivision> obj)
  {
    if (_eventId == null) return;
    
    var tuple = Tuple.Create(_eventId, obj.RowData.Eventchallengeid, obj.RowData.Eventchallengename);
    switch (obj.CommandColumn.Title)
    {
      case "Judges":
        await sessionStorage.SetItemAsync(Helper.paramChellengeName, tuple);
        navManager.NavigateTo("/ChallengeCriteriaJudgeConfig");
        break;
      case "Edit":
        await sessionStorage.SetItemAsync(Helper.paramChellengeName, tuple);
        navManager.NavigateTo("/EventChallengeConfig");
        break;
    }
  }
  
  // private async Task OnGridRowDoubleClick(RecordDoubleClickEventArgs<VEventchallengedivision> obj)
  // {
  //   await sessionStorage.SetItemAsync(Helper.paramChellengeName, Tuple.Create(obj.RowData.Eventchallengeid, obj.RowData.Eventchallengename));
  //   navManager.NavigateTo("/ChallengeCriteriaJudgeConfig");
  // }

  private void OnGridActionBegin(ActionEventArgs<VEventchallengedivision> obj)
  {
  }
  
  private async Task OnEventChallengeGridToolBarClick(ClickEventArgs args)
  {
    if (EventChallengeDivisionGrid == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(EventChallengeDivisionGrid)}_excelexport":
        await EventChallengeDivisionGrid.ExportToExcelAsync();
        break;
      case $"{nameof(EventChallengeDivisionGrid)}_pdfexport":
        await EventChallengeDivisionGrid.ExportToPdfAsync();
        break;
      case $"{nameof(EventChallengeDivisionGrid)}_csvexport":
        await EventChallengeDivisionGrid.ExportToCsvAsync();
        break;
    }
  }

  private Query GetChallengeDivisionQuery()
  {
    return new Query().Where(nameof(VEventchallengedivision.Eventid), "equal", _eventId ?? 0);
  }

  #endregion

  #region Combo Evento

  string? _eventDesde { get; set; }
  string? _eventHasta { get; set; }

  SfComboBox<int?, Event>? sfComboEvent { get; set; }
  int? _eventId { get; set; }
  List<Event> _lstEvents = new();

  protected override Task OnInitializedAsync()
  {
    _lstEvents = Helper.DB.Events.OrderBy(x => x.Name).ToList();
    if (_lstEvents.Any())
      SetEventInternalValues(_lstEvents.First());

    return base.OnInitializedAsync();
  }

  private void SetEventInternalValues(Event? aEvent)
  {
    if (aEvent != null)
    {
      _eventId = aEvent.Id;
      _eventDesde = aEvent.Startdate.ToString("dd/MM/yyyy HH:mm");
      _eventHasta = aEvent.Enddate.ToString("dd/MM/yyyy HH:mm");
    }
    else
    {
      _eventId = null;
      _eventDesde = null;
      _eventHasta = null;
    }
    EventChallengeDivisionGrid?.Refresh();
  }

  private void OnEventValueChange(ChangeEventArgs<int?, Event> args)
  {
    Event? dbEvent = null;
    if (args.Value != null)
    {
      dbEvent = Helper.DB.Events.Find(args.Value);
    }
    SetEventInternalValues(dbEvent);
    StateHasChanged();
  }

  #endregion
}