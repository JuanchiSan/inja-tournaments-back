@page "/ContenderInscription"
@using Log = Serilog.Log

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navManager

<div>
  <div>
    <h2>Contender: @_contenderName</h2>
  </div>
  <table>
    <tr>
      <td><SfButton Content="Go Back" @onclick="@(() => { navManager.NavigateTo("/Contenders");})"/></td>
      <td><SfButton IsPrimary="true" Content="Save All Changes" @onclick="@OnSaveChanges"/></td>
    </tr>
  </table>
  <div>
    <SfGrid @ref="Grid" TValue="InternalEventChallengeDivision" ID="@nameof(Grid)"
            AllowFiltering="true" AllowReordering="true" AllowResizing="true"
            AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
            Toolbar="@(new List<string> { "Update", "Cancel", "PdfExport", "Print", "Search" })"
            DataSource="_lstChallengesDivisions">
      <GridEditSettings AllowEditing="true"/>
      <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
      <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
      <GridSortSettings>
        <GridSortColumns>
          <GridSortColumn Field="@nameof(InternalEventChallengeDivision.EventChallengeName)"/>
        </GridSortColumns>
      </GridSortSettings>
      <GridEvents OnToolbarClick="@OnGridToolBarClick" TValue="InternalEventChallengeDivision"/>
      <GridColumns>
        <GridColumn Field="@nameof(InternalEventChallengeDivision.Key)" IsPrimaryKey="true" Visible="false"/>
        <GridColumn Field="@nameof(InternalEventChallengeDivision.Selected)" DisplayAsCheckBox="true" HeaderText="Selected" Width="70"/>
        <GridColumn Field="@nameof(InternalEventChallengeDivision.EventChallengeName)" HeaderText="Last Name" Width="150"/>
        <GridColumn Field="@nameof(InternalEventChallengeDivision.DivisionName)" HeaderText="First" Width="150"/>
      </GridColumns>
    </SfGrid>
  </div>
</div>

@code {
  SfGrid<InternalEventChallengeDivision>? Grid;
  List<InternalEventChallengeDivision>? _lstChallengesDivisions;
  int? _eventId;
  int? _contenderId;
  string? _contenderName;

  private void FillDS()
  {
    _lstChallengesDivisions = null;

    var cosa = Helper.DB.VEventchallengedivisionPlanas.Where(x => x.Eventid == _eventId).ToList();
    var insc = Helper.DB.VUserinscriptionPlanas.Where(x => x.Eventid == _eventId && x.Userid == _contenderId).ToList();

    _lstChallengesDivisions = new List<InternalEventChallengeDivision>();
    foreach (var item in cosa)
    {
      _lstChallengesDivisions.Add(new InternalEventChallengeDivision
      {
        DivisionId = Convert.ToInt32(item.Divisionid),
        DivisionName = Convert.ToString(item.Divisionname) ?? string.Empty,
        EventChallengeid = Convert.ToInt32(item.Eventchallengeid),
        EventChallengeName = Convert.ToString(item.Eventchallengename) ?? string.Empty,
        Selected = insc.Any(x => x.Eventchallengeid == item.Eventchallengeid && x.Divisionid == item.Divisionid)
      });
    }
  }

  private async Task OnGridToolBarClick(ClickEventArgs args)
  {
    if (Grid == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(Grid)}_excelexport":
        await Grid.ExportToExcelAsync();
        break;
      case $"{nameof(Grid)}_pdfexport":
        await Grid.ExportToPdfAsync();
        break;
      case $"{nameof(Grid)}_csvexport":
        await Grid.ExportToCsvAsync();
        break;
    }
  }

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var result = await sessionStorage.GetItemAsync<Tuple<int, int, string>>("ContenderInscription");
      _eventId = result.Item1;
      _contenderId = result.Item2;
      _contenderName = result.Item3;
      FillDS();
    }
    catch (Exception e)
    {
      Log.Error(e, "Error on ContenderInscription OnInitialized");
      navManager.NavigateTo("/Contenders");
    }
  }
}

@code{

  public class InternalEventChallengeDivision
  {
    public string Key => $"{EventChallengeid}_{DivisionId}";
    public int EventChallengeid { get; set; }
    public string EventChallengeName { get; set; } = string.Empty;
    public int DivisionId { get; set; }
    public string DivisionName { get; set; } = string.Empty;
    public bool Selected { get; set; }
  }

  private void OnSaveChanges(MouseEventArgs obj)
  {
    if (_lstChallengesDivisions == null) return;
    var _dbInscrip = Helper
      .DB.Userinscriptions
      .Where(x => x.Uuserid == _contenderId && x.Ueventid == _eventId && x.Utypeid == 1)
      .ToList();
    
    foreach (var item in _lstChallengesDivisions)
    {
      var dbIncr = _dbInscrip.FirstOrDefault(x => x.Eventchallengeid == item.EventChallengeid && x.Divisionid == item.DivisionId);
      switch (item.Selected)
      {
        // lo seleccionaron y no está
        case true when dbIncr == null:
        {
          Helper.DB.Userinscriptions.Add(new Userinscription
          {
            Eventchallengeid = item.EventChallengeid,
            Divisionid = item.DivisionId,
            Wonfirstplace = 0,
            Inscriptiondate = DateTime.Now,
            Utypeid = 1,
            Ueventid = Convert.ToInt32(_eventId),
            Uuserid = Convert.ToInt32(_contenderId)
          });
          break;
        }
        // Está y lo tengo que borrar
        case false when dbIncr != null:
          Helper.DB.Userinscriptions.Remove(dbIncr);
          break;
      }
    }
    try
    {
      Helper.DB.SaveChanges();
      navManager.NavigateTo("/Contenders");
    }
    catch (Exception e)
    {
      Log.Error(e,"Error on ContenderInscriptions");
    }
  }

}