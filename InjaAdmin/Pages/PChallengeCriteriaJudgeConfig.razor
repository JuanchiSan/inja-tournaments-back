@page "/ChallengeCriteriaJudgeConfig"

@using Microsoft.EntityFrameworkCore

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navManager

<h3>Judge Challenge Assignement</h3>
<div>
  <div>
    <h2>Challenge @_challengeName</h2>
  </div>
  <div class="bootstrap5-dark">
    <table class="table">
      <tbody>
      <tr>
        <td>
          <SfButton @onclick="@(_ => { navManager.NavigateTo("/EventConfig"); })">Go Back</SfButton>
        </td>
        <td>
          <SfButton IsPrimary="true" @onclick="@OnSaveAllChanges">Save All Changes</SfButton>
        </td>
      </tr>
      </tbody>
    </table>
  </div>
  <div>
    <div>Criterias</div>
    <div>
      @if (LstCriterias != null)
      {
        <SfGrid @ref="@GridCriterias" TValue="InternalInjaCriteria" ID="@nameof(GridCriterias)"
                AllowFiltering="true" AllowReordering="true" AllowResizing="true"
                AllowExcelExport="true" AllowPdfExport="true" AllowSelection="true" AllowSorting="true"
                Toolbar="@(new List<string> { "Edit", "Update", "Cancel", "ExcelExport", "PdfExport", "CsvExport", "Search" })"
                DataSource="@LstCriterias">
          <GridEditSettings AllowEditing="true" Mode="EditMode.Normal"/>
          <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"/>
          <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
          <GridEvents CommandClicked="OnFillAll" OnToolbarClick="@GridToolbarClick" TValue="InternalInjaCriteria"/>
          <GridColumns>
            <GridColumn Field="@nameof(InternalInjaCriteria.CRKey)" IsPrimaryKey="true" Visible="false"/>
            <GridColumn Field="@nameof(InternalInjaCriteria.CriteriaName)" HeaderText="Criterias" Width="200" AllowEditing="false"/>
            <GridColumn Field="@nameof(InternalInjaCriteria.Round)" HeaderText="Rounds" Width="200" AllowEditing="false"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_0)" HeaderText="@(GetHeader(0))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 1)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_1)" HeaderText="@(GetHeader(1))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 2)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_2)" HeaderText="@(GetHeader(2))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 3)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_3)" HeaderText="@(GetHeader(3))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 4)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_4)" HeaderText="@(GetHeader(4))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 5)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_5)" HeaderText="@(GetHeader(5))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 6)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_6)" HeaderText="@(GetHeader(6))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 7)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_7)" HeaderText="@(GetHeader(7))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 8)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_8)" HeaderText="@(GetHeader(8))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 9)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridForeignColumn Field="@nameof(InternalInjaCriteria.div_9)" HeaderText="@(GetHeader(9))" Width="200" AllowEditing="true" Visible="@(LstDivisions?.Count >= 10)"
                               ForeignDataSource="@LstJudges" ForeignKeyField="@nameof(Injauser.Id)" ForeignKeyValue="@nameof(Injauser.Name)"/>
            <GridColumn HeaderText="Manage Records" Width="100">
              <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.None" Title="Copy Judge" ButtonOption="@(new CommandButtonOptions { Content = "Copy Judges" })"/>
              </GridCommandColumns>
            </GridColumn>
          </GridColumns>
        </SfGrid>
      }
      else
      {
        <h2>Loading</h2>
      }

    </div>
  </div>
</div>

@code {

  #region general

  private List<Tuple<int?, string?>>? LstDivisions;
  private List<Injauser> LstJudges = new();
  private List<InternalInjaCriteria>? LstCriterias;
  private List<VCriteriasJudgesPlana>? LstAllCriteriasJudges;

  string? _challengeName { get; set; }
  int? _eventchallengeId { get; set; }
  int? _eventId { get; set; }
  
  private string? GetHeader(int i)
  {
    return i < LstDivisions?.Count ? LstDivisions[i].Item2 : string.Empty;
  }

  private int DivisionIdOfPlace(int i)
  {
    if (LstDivisions != null && i < LstDivisions.Count)
      return Convert.ToInt32(LstDivisions[i].Item1);
    return -1;
  }

  private void OnSaveAllChanges(MouseEventArgs obj)
  {
    if (LstDivisions == null || LstDivisions.Count == 0) return;
    foreach (var icriteria in LstCriterias!)
    {
      for (int i = 0; i < LstDivisions.Count; i++)
      {
        var divisionid = DivisionIdOfPlace(i);
        var criteriaId = icriteria.CriteriaId;
        var round = icriteria.Round;
        var ejcd = LstAllCriteriasJudges?.FirstOrDefault(x => x.Divisionid == divisionid && x.Criteriaid == criteriaId && x.Rounds == round);
        var challengejudgementcriteriaid = ejcd?.Challengejudgementcriteriaid;
        var valObjJudge = icriteria.GetType().GetProperty($"div_{i}")?.GetValue(icriteria);
        var judgeid = valObjJudge == null ? (int?)null : Convert.ToInt32(valObjJudge);

        Eventjudgechallengedivision? db_ejcd = null;

        if (ejcd?.Userid != null && judgeid == null) // existe ejcd y sacaron el juez, hay que borrar
        {
          db_ejcd = Helper.DB.Eventjudgechallengedivisions.FirstOrDefault(x => x.Divisionid == divisionid && x.Eventchallengeid == _eventchallengeId && x.Challengejuzmentcriteria == challengejudgementcriteriaid);
          Helper.DB.Eventjudgechallengedivisions.Remove(db_ejcd!);
        }
        if (ejcd?.Userid != null && judgeid != null && ejcd.Userid != judgeid) // Existe y le cambiaron el juez
        {
          db_ejcd = Helper.DB.Eventjudgechallengedivisions.FirstOrDefault(x => x.Divisionid == divisionid && x.Eventchallengeid == _eventchallengeId && x.Challengejuzmentcriteria == challengejudgementcriteriaid);
          if (db_ejcd != null) db_ejcd.Judgeid = Convert.ToInt32(judgeid);
        }
        if (ejcd?.Userid == null && judgeid != null) // No existe y lo tengo que agregar
        {
          db_ejcd = new Eventjudgechallengedivision
          {
            Divisionid = divisionid,
            Eventchallengeid = Convert.ToInt32(_eventchallengeId),
            Challengejuzmentcriteria = Convert.ToInt32(challengejudgementcriteriaid),
            Judgeid = Convert.ToInt32(judgeid),
            Active = true,
            Creationdate = DateTime.Now
          };
          Helper.DB.Eventjudgechallengedivisions.Add(db_ejcd);
        }
        if (db_ejcd != null)
          Helper.DB.SaveChanges();
      }
    }
    navManager.NavigateTo("/EventConfig");
  }

  private async Task FillDataSources()
  {
  // Fill Judges
    LstJudges = await Helper.DB.Injausers
      .Include(q=>q.Injauserusertypes)
      .Where(x => x.Injauserusertypes.Any(g=>g.Typeid == 3 && g.Eventid == _eventId))
      .OrderBy(x=>x.Name)
      .ToListAsync();

    LstAllCriteriasJudges = await Helper.DB.VCriteriasJudgesPlanas
      .Where(x => x.Eventchallengeid == _eventchallengeId)
      .OrderBy(x=>x.Divisionname)
      .ToListAsync();

    var dcriterias = LstAllCriteriasJudges
      .Select(x => Tuple.Create(x.Criteriaid, x.Rounds, x.Criterianame))
      .Distinct()
      .OrderBy(x=>x.Item3)
      .ToList();

    LstDivisions = LstAllCriteriasJudges
      .Select(x => Tuple.Create(x.Divisionid, x.Divisionname))
      .OrderBy(x=>x.Item2)
      .Distinct()
      .ToList();

    LstCriterias = new List<InternalInjaCriteria>();

    foreach (var tc in dcriterias)
    {
      var d = new InternalInjaCriteria
      {
        CRKey = $"{Convert.ToInt32(tc.Item1)}_{Convert.ToInt32(tc.Item2)}",
        CriteriaId = Convert.ToInt32(tc.Item1),
        CriteriaName = tc.Item3!,
        Round = Convert.ToInt32(tc.Item2),
      };

      for (var j = 1; j <= 10; j++)
      {
        if (LstDivisions.Count >= j)
        {
          d.GetType().GetProperty($"div_{j-1}")?.SetValue(d, 
            LstAllCriteriasJudges
                  .FirstOrDefault(z => z.Criterianame == tc.Item3 && z.Divisionid == LstDivisions[j - 1].Item1)?.Userid);
        }
      }

      LstCriterias.Add(d);
    }
    StateHasChanged();
  }

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var cosa = await sessionStorage.GetItemAsync<Tuple<int, int, string>>(Helper.paramJudgeChellengeName);
      _eventId = cosa.Item1;
      _challengeName = cosa.Item3;
      _eventchallengeId = cosa.Item2;
      await FillDataSources();
    }
    catch (Exception a)
    {
      Serilog.Log.Error(a, "Error Opening ChallengeAssignement");
      navManager.NavigateTo("/EventConfig");
    }
  }

  #endregion

  #region Grid

  SfGrid<InternalInjaCriteria>? GridCriterias { get; set; }

  private void OnFillAll(CommandClickEventArgs<InternalInjaCriteria> obj)
  {
    if (LstDivisions == null || obj.RowData.div_0 == null) return;
    
    var judge = (int)obj.RowData.div_0;
    
    for (int i = 1; i < LstDivisions.Count; i++)
    {
      obj.RowData.GetType().GetProperty($"div_{i}").SetValue(obj.RowData, judge);
    }
    Task.Run(async () => { await GridCriterias.Refresh(); });
    StateHasChanged();
  }
  
  private async Task GridToolbarClick(ClickEventArgs args)
  {
    if (GridCriterias == null) return;
    switch (args.Item.Id)
    {
      case $"{nameof(GridCriterias)}_excelexport":
        await GridCriterias.ExportToExcelAsync();
        break;
      case $"{nameof(GridCriterias)}_pdfexport":
        await GridCriterias.ExportToPdfAsync();
        break;
      case $"{nameof(GridCriterias)}_csvexport":
        await GridCriterias.ExportToCsvAsync();
        break;
    }
  }

  #endregion

}

@code
{
  public class InternalInjaCriteria
  {
    public string CRKey { get; set; } = string.Empty;
    public int CriteriaId { get; set; }
    public int Round { get; set; }
    public string CriteriaName { get; set; } = string.Empty;
    public int? div_0 { get; set; }
    public int? div_1 { get; set; }
    public int? div_2 { get; set; }
    public int? div_3 { get; set; }
    public int? div_4 { get; set; }
    public int? div_5 { get; set; }
    public int? div_6 { get; set; }
    public int? div_7 { get; set; }
    public int? div_8 { get; set; }
    public int? div_9 { get; set; }
  }
}